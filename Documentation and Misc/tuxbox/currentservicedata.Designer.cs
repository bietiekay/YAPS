//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Documentation_and_Misc.tuxbox {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("NewDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class NewDataSet : global::System.Data.DataSet {
        
        private currentservicedataDataTable tablecurrentservicedata;
        
        private serviceDataTable tableservice;
        
        private audio_channelsDataTable tableaudio_channels;
        
        private channelDataTable tablechannel;
        
        private current_eventDataTable tablecurrent_event;
        
        private next_eventDataTable tablenext_event;
        
        private global::System.Data.DataRelation relationcurrentservicedata_service;
        
        private global::System.Data.DataRelation relationcurrentservicedata_audio_channels;
        
        private global::System.Data.DataRelation relationaudio_channels_channel;
        
        private global::System.Data.DataRelation relationcurrentservicedata_current_event;
        
        private global::System.Data.DataRelation relationcurrentservicedata_next_event;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NewDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected NewDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["currentservicedata"] != null)) {
                    base.Tables.Add(new currentservicedataDataTable(ds.Tables["currentservicedata"]));
                }
                if ((ds.Tables["service"] != null)) {
                    base.Tables.Add(new serviceDataTable(ds.Tables["service"]));
                }
                if ((ds.Tables["audio_channels"] != null)) {
                    base.Tables.Add(new audio_channelsDataTable(ds.Tables["audio_channels"]));
                }
                if ((ds.Tables["channel"] != null)) {
                    base.Tables.Add(new channelDataTable(ds.Tables["channel"]));
                }
                if ((ds.Tables["current_event"] != null)) {
                    base.Tables.Add(new current_eventDataTable(ds.Tables["current_event"]));
                }
                if ((ds.Tables["next_event"] != null)) {
                    base.Tables.Add(new next_eventDataTable(ds.Tables["next_event"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public currentservicedataDataTable currentservicedata {
            get {
                return this.tablecurrentservicedata;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public serviceDataTable service {
            get {
                return this.tableservice;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public audio_channelsDataTable audio_channels {
            get {
                return this.tableaudio_channels;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public channelDataTable channel {
            get {
                return this.tablechannel;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public current_eventDataTable current_event {
            get {
                return this.tablecurrent_event;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public next_eventDataTable next_event {
            get {
                return this.tablenext_event;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            NewDataSet cln = ((NewDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["currentservicedata"] != null)) {
                    base.Tables.Add(new currentservicedataDataTable(ds.Tables["currentservicedata"]));
                }
                if ((ds.Tables["service"] != null)) {
                    base.Tables.Add(new serviceDataTable(ds.Tables["service"]));
                }
                if ((ds.Tables["audio_channels"] != null)) {
                    base.Tables.Add(new audio_channelsDataTable(ds.Tables["audio_channels"]));
                }
                if ((ds.Tables["channel"] != null)) {
                    base.Tables.Add(new channelDataTable(ds.Tables["channel"]));
                }
                if ((ds.Tables["current_event"] != null)) {
                    base.Tables.Add(new current_eventDataTable(ds.Tables["current_event"]));
                }
                if ((ds.Tables["next_event"] != null)) {
                    base.Tables.Add(new next_eventDataTable(ds.Tables["next_event"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablecurrentservicedata = ((currentservicedataDataTable)(base.Tables["currentservicedata"]));
            if ((initTable == true)) {
                if ((this.tablecurrentservicedata != null)) {
                    this.tablecurrentservicedata.InitVars();
                }
            }
            this.tableservice = ((serviceDataTable)(base.Tables["service"]));
            if ((initTable == true)) {
                if ((this.tableservice != null)) {
                    this.tableservice.InitVars();
                }
            }
            this.tableaudio_channels = ((audio_channelsDataTable)(base.Tables["audio_channels"]));
            if ((initTable == true)) {
                if ((this.tableaudio_channels != null)) {
                    this.tableaudio_channels.InitVars();
                }
            }
            this.tablechannel = ((channelDataTable)(base.Tables["channel"]));
            if ((initTable == true)) {
                if ((this.tablechannel != null)) {
                    this.tablechannel.InitVars();
                }
            }
            this.tablecurrent_event = ((current_eventDataTable)(base.Tables["current_event"]));
            if ((initTable == true)) {
                if ((this.tablecurrent_event != null)) {
                    this.tablecurrent_event.InitVars();
                }
            }
            this.tablenext_event = ((next_eventDataTable)(base.Tables["next_event"]));
            if ((initTable == true)) {
                if ((this.tablenext_event != null)) {
                    this.tablenext_event.InitVars();
                }
            }
            this.relationcurrentservicedata_service = this.Relations["currentservicedata_service"];
            this.relationcurrentservicedata_audio_channels = this.Relations["currentservicedata_audio_channels"];
            this.relationaudio_channels_channel = this.Relations["audio_channels_channel"];
            this.relationcurrentservicedata_current_event = this.Relations["currentservicedata_current_event"];
            this.relationcurrentservicedata_next_event = this.Relations["currentservicedata_next_event"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "NewDataSet";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablecurrentservicedata = new currentservicedataDataTable();
            base.Tables.Add(this.tablecurrentservicedata);
            this.tableservice = new serviceDataTable();
            base.Tables.Add(this.tableservice);
            this.tableaudio_channels = new audio_channelsDataTable();
            base.Tables.Add(this.tableaudio_channels);
            this.tablechannel = new channelDataTable();
            base.Tables.Add(this.tablechannel);
            this.tablecurrent_event = new current_eventDataTable();
            base.Tables.Add(this.tablecurrent_event);
            this.tablenext_event = new next_eventDataTable();
            base.Tables.Add(this.tablenext_event);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("currentservicedata_service", new global::System.Data.DataColumn[] {
                        this.tablecurrentservicedata.currentservicedata_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableservice.currentservicedata_IdColumn});
            this.tableservice.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("currentservicedata_audio_channels", new global::System.Data.DataColumn[] {
                        this.tablecurrentservicedata.currentservicedata_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableaudio_channels.currentservicedata_IdColumn});
            this.tableaudio_channels.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("audio_channels_channel", new global::System.Data.DataColumn[] {
                        this.tableaudio_channels.audio_channels_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablechannel.audio_channels_IdColumn});
            this.tablechannel.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("currentservicedata_current_event", new global::System.Data.DataColumn[] {
                        this.tablecurrentservicedata.currentservicedata_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecurrent_event.currentservicedata_IdColumn});
            this.tablecurrent_event.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("currentservicedata_next_event", new global::System.Data.DataColumn[] {
                        this.tablecurrentservicedata.currentservicedata_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablenext_event.currentservicedata_IdColumn});
            this.tablenext_event.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationcurrentservicedata_service = new global::System.Data.DataRelation("currentservicedata_service", new global::System.Data.DataColumn[] {
                        this.tablecurrentservicedata.currentservicedata_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableservice.currentservicedata_IdColumn}, false);
            this.relationcurrentservicedata_service.Nested = true;
            this.Relations.Add(this.relationcurrentservicedata_service);
            this.relationcurrentservicedata_audio_channels = new global::System.Data.DataRelation("currentservicedata_audio_channels", new global::System.Data.DataColumn[] {
                        this.tablecurrentservicedata.currentservicedata_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableaudio_channels.currentservicedata_IdColumn}, false);
            this.relationcurrentservicedata_audio_channels.Nested = true;
            this.Relations.Add(this.relationcurrentservicedata_audio_channels);
            this.relationaudio_channels_channel = new global::System.Data.DataRelation("audio_channels_channel", new global::System.Data.DataColumn[] {
                        this.tableaudio_channels.audio_channels_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablechannel.audio_channels_IdColumn}, false);
            this.relationaudio_channels_channel.Nested = true;
            this.Relations.Add(this.relationaudio_channels_channel);
            this.relationcurrentservicedata_current_event = new global::System.Data.DataRelation("currentservicedata_current_event", new global::System.Data.DataColumn[] {
                        this.tablecurrentservicedata.currentservicedata_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecurrent_event.currentservicedata_IdColumn}, false);
            this.relationcurrentservicedata_current_event.Nested = true;
            this.Relations.Add(this.relationcurrentservicedata_current_event);
            this.relationcurrentservicedata_next_event = new global::System.Data.DataRelation("currentservicedata_next_event", new global::System.Data.DataColumn[] {
                        this.tablecurrentservicedata.currentservicedata_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablenext_event.currentservicedata_IdColumn}, false);
            this.relationcurrentservicedata_next_event.Nested = true;
            this.Relations.Add(this.relationcurrentservicedata_next_event);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecurrentservicedata() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeservice() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeaudio_channels() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializechannel() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecurrent_event() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializenext_event() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void currentservicedataRowChangeEventHandler(object sender, currentservicedataRowChangeEvent e);
        
        public delegate void serviceRowChangeEventHandler(object sender, serviceRowChangeEvent e);
        
        public delegate void audio_channelsRowChangeEventHandler(object sender, audio_channelsRowChangeEvent e);
        
        public delegate void channelRowChangeEventHandler(object sender, channelRowChangeEvent e);
        
        public delegate void current_eventRowChangeEventHandler(object sender, current_eventRowChangeEvent e);
        
        public delegate void next_eventRowChangeEventHandler(object sender, next_eventRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class currentservicedataDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnaudio_track;
            
            private global::System.Data.DataColumn columnvideo_channels;
            
            private global::System.Data.DataColumn columncurrentservicedata_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public currentservicedataDataTable() {
                this.TableName = "currentservicedata";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal currentservicedataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected currentservicedataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn audio_trackColumn {
                get {
                    return this.columnaudio_track;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn video_channelsColumn {
                get {
                    return this.columnvideo_channels;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn currentservicedata_IdColumn {
                get {
                    return this.columncurrentservicedata_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public currentservicedataRow this[int index] {
                get {
                    return ((currentservicedataRow)(this.Rows[index]));
                }
            }
            
            public event currentservicedataRowChangeEventHandler currentservicedataRowChanging;
            
            public event currentservicedataRowChangeEventHandler currentservicedataRowChanged;
            
            public event currentservicedataRowChangeEventHandler currentservicedataRowDeleting;
            
            public event currentservicedataRowChangeEventHandler currentservicedataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcurrentservicedataRow(currentservicedataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public currentservicedataRow AddcurrentservicedataRow(string audio_track, string video_channels) {
                currentservicedataRow rowcurrentservicedataRow = ((currentservicedataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        audio_track,
                        video_channels,
                        null};
                rowcurrentservicedataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcurrentservicedataRow);
                return rowcurrentservicedataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                currentservicedataDataTable cln = ((currentservicedataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new currentservicedataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnaudio_track = base.Columns["audio_track"];
                this.columnvideo_channels = base.Columns["video_channels"];
                this.columncurrentservicedata_Id = base.Columns["currentservicedata_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnaudio_track = new global::System.Data.DataColumn("audio_track", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaudio_track);
                this.columnvideo_channels = new global::System.Data.DataColumn("video_channels", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvideo_channels);
                this.columncurrentservicedata_Id = new global::System.Data.DataColumn("currentservicedata_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncurrentservicedata_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columncurrentservicedata_Id}, true));
                this.columncurrentservicedata_Id.AutoIncrement = true;
                this.columncurrentservicedata_Id.AllowDBNull = false;
                this.columncurrentservicedata_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public currentservicedataRow NewcurrentservicedataRow() {
                return ((currentservicedataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new currentservicedataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(currentservicedataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.currentservicedataRowChanged != null)) {
                    this.currentservicedataRowChanged(this, new currentservicedataRowChangeEvent(((currentservicedataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.currentservicedataRowChanging != null)) {
                    this.currentservicedataRowChanging(this, new currentservicedataRowChangeEvent(((currentservicedataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.currentservicedataRowDeleted != null)) {
                    this.currentservicedataRowDeleted(this, new currentservicedataRowChangeEvent(((currentservicedataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.currentservicedataRowDeleting != null)) {
                    this.currentservicedataRowDeleting(this, new currentservicedataRowChangeEvent(((currentservicedataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecurrentservicedataRow(currentservicedataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "currentservicedataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class serviceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnreference;
            
            private global::System.Data.DataColumn columncurrentservicedata_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public serviceDataTable() {
                this.TableName = "service";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal serviceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected serviceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn referenceColumn {
                get {
                    return this.columnreference;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn currentservicedata_IdColumn {
                get {
                    return this.columncurrentservicedata_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public serviceRow this[int index] {
                get {
                    return ((serviceRow)(this.Rows[index]));
                }
            }
            
            public event serviceRowChangeEventHandler serviceRowChanging;
            
            public event serviceRowChangeEventHandler serviceRowChanged;
            
            public event serviceRowChangeEventHandler serviceRowDeleting;
            
            public event serviceRowChangeEventHandler serviceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddserviceRow(serviceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public serviceRow AddserviceRow(string name, string reference, currentservicedataRow parentcurrentservicedataRowBycurrentservicedata_service) {
                serviceRow rowserviceRow = ((serviceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        reference,
                        null};
                if ((parentcurrentservicedataRowBycurrentservicedata_service != null)) {
                    columnValuesArray[2] = parentcurrentservicedataRowBycurrentservicedata_service[2];
                }
                rowserviceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowserviceRow);
                return rowserviceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                serviceDataTable cln = ((serviceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new serviceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columnreference = base.Columns["reference"];
                this.columncurrentservicedata_Id = base.Columns["currentservicedata_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnreference = new global::System.Data.DataColumn("reference", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreference);
                this.columncurrentservicedata_Id = new global::System.Data.DataColumn("currentservicedata_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncurrentservicedata_Id);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public serviceRow NewserviceRow() {
                return ((serviceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new serviceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(serviceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.serviceRowChanged != null)) {
                    this.serviceRowChanged(this, new serviceRowChangeEvent(((serviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.serviceRowChanging != null)) {
                    this.serviceRowChanging(this, new serviceRowChangeEvent(((serviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.serviceRowDeleted != null)) {
                    this.serviceRowDeleted(this, new serviceRowChangeEvent(((serviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.serviceRowDeleting != null)) {
                    this.serviceRowDeleting(this, new serviceRowChangeEvent(((serviceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveserviceRow(serviceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "serviceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class audio_channelsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnaudio_channels_Id;
            
            private global::System.Data.DataColumn columncurrentservicedata_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public audio_channelsDataTable() {
                this.TableName = "audio_channels";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal audio_channelsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected audio_channelsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn audio_channels_IdColumn {
                get {
                    return this.columnaudio_channels_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn currentservicedata_IdColumn {
                get {
                    return this.columncurrentservicedata_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public audio_channelsRow this[int index] {
                get {
                    return ((audio_channelsRow)(this.Rows[index]));
                }
            }
            
            public event audio_channelsRowChangeEventHandler audio_channelsRowChanging;
            
            public event audio_channelsRowChangeEventHandler audio_channelsRowChanged;
            
            public event audio_channelsRowChangeEventHandler audio_channelsRowDeleting;
            
            public event audio_channelsRowChangeEventHandler audio_channelsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addaudio_channelsRow(audio_channelsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public audio_channelsRow Addaudio_channelsRow(currentservicedataRow parentcurrentservicedataRowBycurrentservicedata_audio_channels) {
                audio_channelsRow rowaudio_channelsRow = ((audio_channelsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentcurrentservicedataRowBycurrentservicedata_audio_channels != null)) {
                    columnValuesArray[1] = parentcurrentservicedataRowBycurrentservicedata_audio_channels[2];
                }
                rowaudio_channelsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowaudio_channelsRow);
                return rowaudio_channelsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                audio_channelsDataTable cln = ((audio_channelsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new audio_channelsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnaudio_channels_Id = base.Columns["audio_channels_Id"];
                this.columncurrentservicedata_Id = base.Columns["currentservicedata_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnaudio_channels_Id = new global::System.Data.DataColumn("audio_channels_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnaudio_channels_Id);
                this.columncurrentservicedata_Id = new global::System.Data.DataColumn("currentservicedata_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncurrentservicedata_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnaudio_channels_Id}, true));
                this.columnaudio_channels_Id.AutoIncrement = true;
                this.columnaudio_channels_Id.AllowDBNull = false;
                this.columnaudio_channels_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public audio_channelsRow Newaudio_channelsRow() {
                return ((audio_channelsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new audio_channelsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(audio_channelsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.audio_channelsRowChanged != null)) {
                    this.audio_channelsRowChanged(this, new audio_channelsRowChangeEvent(((audio_channelsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.audio_channelsRowChanging != null)) {
                    this.audio_channelsRowChanging(this, new audio_channelsRowChangeEvent(((audio_channelsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.audio_channelsRowDeleted != null)) {
                    this.audio_channelsRowDeleted(this, new audio_channelsRowChangeEvent(((audio_channelsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.audio_channelsRowDeleting != null)) {
                    this.audio_channelsRowDeleting(this, new audio_channelsRowChangeEvent(((audio_channelsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeaudio_channelsRow(audio_channelsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "audio_channelsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class channelDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnpid;
            
            private global::System.Data.DataColumn columnselected;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnaudio_channels_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public channelDataTable() {
                this.TableName = "channel";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal channelDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected channelDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pidColumn {
                get {
                    return this.columnpid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn selectedColumn {
                get {
                    return this.columnselected;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn audio_channels_IdColumn {
                get {
                    return this.columnaudio_channels_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public channelRow this[int index] {
                get {
                    return ((channelRow)(this.Rows[index]));
                }
            }
            
            public event channelRowChangeEventHandler channelRowChanging;
            
            public event channelRowChangeEventHandler channelRowChanged;
            
            public event channelRowChangeEventHandler channelRowDeleting;
            
            public event channelRowChangeEventHandler channelRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddchannelRow(channelRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public channelRow AddchannelRow(string pid, string selected, string name, audio_channelsRow parentaudio_channelsRowByaudio_channels_channel) {
                channelRow rowchannelRow = ((channelRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        pid,
                        selected,
                        name,
                        null};
                if ((parentaudio_channelsRowByaudio_channels_channel != null)) {
                    columnValuesArray[3] = parentaudio_channelsRowByaudio_channels_channel[0];
                }
                rowchannelRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowchannelRow);
                return rowchannelRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                channelDataTable cln = ((channelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new channelDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpid = base.Columns["pid"];
                this.columnselected = base.Columns["selected"];
                this.columnname = base.Columns["name"];
                this.columnaudio_channels_Id = base.Columns["audio_channels_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpid = new global::System.Data.DataColumn("pid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpid);
                this.columnselected = new global::System.Data.DataColumn("selected", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnselected);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnaudio_channels_Id = new global::System.Data.DataColumn("audio_channels_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnaudio_channels_Id);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public channelRow NewchannelRow() {
                return ((channelRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new channelRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(channelRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.channelRowChanged != null)) {
                    this.channelRowChanged(this, new channelRowChangeEvent(((channelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.channelRowChanging != null)) {
                    this.channelRowChanging(this, new channelRowChangeEvent(((channelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.channelRowDeleted != null)) {
                    this.channelRowDeleted(this, new channelRowChangeEvent(((channelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.channelRowDeleting != null)) {
                    this.channelRowDeleting(this, new channelRowChangeEvent(((channelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovechannelRow(channelRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "channelDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class current_eventDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columndate;
            
            private global::System.Data.DataColumn columntime;
            
            private global::System.Data.DataColumn columnstart;
            
            private global::System.Data.DataColumn columnduration;
            
            private global::System.Data.DataColumn columndescription;
            
            private global::System.Data.DataColumn columndetails;
            
            private global::System.Data.DataColumn columncurrentservicedata_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public current_eventDataTable() {
                this.TableName = "current_event";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal current_eventDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected current_eventDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dateColumn {
                get {
                    return this.columndate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn timeColumn {
                get {
                    return this.columntime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn startColumn {
                get {
                    return this.columnstart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn durationColumn {
                get {
                    return this.columnduration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detailsColumn {
                get {
                    return this.columndetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn currentservicedata_IdColumn {
                get {
                    return this.columncurrentservicedata_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public current_eventRow this[int index] {
                get {
                    return ((current_eventRow)(this.Rows[index]));
                }
            }
            
            public event current_eventRowChangeEventHandler current_eventRowChanging;
            
            public event current_eventRowChangeEventHandler current_eventRowChanged;
            
            public event current_eventRowChangeEventHandler current_eventRowDeleting;
            
            public event current_eventRowChangeEventHandler current_eventRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addcurrent_eventRow(current_eventRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public current_eventRow Addcurrent_eventRow(string date, string time, string start, string duration, string description, string details, currentservicedataRow parentcurrentservicedataRowBycurrentservicedata_current_event) {
                current_eventRow rowcurrent_eventRow = ((current_eventRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        date,
                        time,
                        start,
                        duration,
                        description,
                        details,
                        null};
                if ((parentcurrentservicedataRowBycurrentservicedata_current_event != null)) {
                    columnValuesArray[6] = parentcurrentservicedataRowBycurrentservicedata_current_event[2];
                }
                rowcurrent_eventRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcurrent_eventRow);
                return rowcurrent_eventRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                current_eventDataTable cln = ((current_eventDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new current_eventDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndate = base.Columns["date"];
                this.columntime = base.Columns["time"];
                this.columnstart = base.Columns["start"];
                this.columnduration = base.Columns["duration"];
                this.columndescription = base.Columns["description"];
                this.columndetails = base.Columns["details"];
                this.columncurrentservicedata_Id = base.Columns["currentservicedata_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndate = new global::System.Data.DataColumn("date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate);
                this.columntime = new global::System.Data.DataColumn("time", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime);
                this.columnstart = new global::System.Data.DataColumn("start", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstart);
                this.columnduration = new global::System.Data.DataColumn("duration", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnduration);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columndetails = new global::System.Data.DataColumn("details", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndetails);
                this.columncurrentservicedata_Id = new global::System.Data.DataColumn("currentservicedata_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncurrentservicedata_Id);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public current_eventRow Newcurrent_eventRow() {
                return ((current_eventRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new current_eventRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(current_eventRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.current_eventRowChanged != null)) {
                    this.current_eventRowChanged(this, new current_eventRowChangeEvent(((current_eventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.current_eventRowChanging != null)) {
                    this.current_eventRowChanging(this, new current_eventRowChangeEvent(((current_eventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.current_eventRowDeleted != null)) {
                    this.current_eventRowDeleted(this, new current_eventRowChangeEvent(((current_eventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.current_eventRowDeleting != null)) {
                    this.current_eventRowDeleting(this, new current_eventRowChangeEvent(((current_eventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removecurrent_eventRow(current_eventRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "current_eventDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class next_eventDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columndate;
            
            private global::System.Data.DataColumn columntime;
            
            private global::System.Data.DataColumn columnstart;
            
            private global::System.Data.DataColumn columnduration;
            
            private global::System.Data.DataColumn columndescription;
            
            private global::System.Data.DataColumn columndetails;
            
            private global::System.Data.DataColumn columncurrentservicedata_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public next_eventDataTable() {
                this.TableName = "next_event";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal next_eventDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected next_eventDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dateColumn {
                get {
                    return this.columndate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn timeColumn {
                get {
                    return this.columntime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn startColumn {
                get {
                    return this.columnstart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn durationColumn {
                get {
                    return this.columnduration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn detailsColumn {
                get {
                    return this.columndetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn currentservicedata_IdColumn {
                get {
                    return this.columncurrentservicedata_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public next_eventRow this[int index] {
                get {
                    return ((next_eventRow)(this.Rows[index]));
                }
            }
            
            public event next_eventRowChangeEventHandler next_eventRowChanging;
            
            public event next_eventRowChangeEventHandler next_eventRowChanged;
            
            public event next_eventRowChangeEventHandler next_eventRowDeleting;
            
            public event next_eventRowChangeEventHandler next_eventRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addnext_eventRow(next_eventRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public next_eventRow Addnext_eventRow(string date, string time, string start, string duration, string description, string details, currentservicedataRow parentcurrentservicedataRowBycurrentservicedata_next_event) {
                next_eventRow rownext_eventRow = ((next_eventRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        date,
                        time,
                        start,
                        duration,
                        description,
                        details,
                        null};
                if ((parentcurrentservicedataRowBycurrentservicedata_next_event != null)) {
                    columnValuesArray[6] = parentcurrentservicedataRowBycurrentservicedata_next_event[2];
                }
                rownext_eventRow.ItemArray = columnValuesArray;
                this.Rows.Add(rownext_eventRow);
                return rownext_eventRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                next_eventDataTable cln = ((next_eventDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new next_eventDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndate = base.Columns["date"];
                this.columntime = base.Columns["time"];
                this.columnstart = base.Columns["start"];
                this.columnduration = base.Columns["duration"];
                this.columndescription = base.Columns["description"];
                this.columndetails = base.Columns["details"];
                this.columncurrentservicedata_Id = base.Columns["currentservicedata_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndate = new global::System.Data.DataColumn("date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate);
                this.columntime = new global::System.Data.DataColumn("time", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime);
                this.columnstart = new global::System.Data.DataColumn("start", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstart);
                this.columnduration = new global::System.Data.DataColumn("duration", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnduration);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columndetails = new global::System.Data.DataColumn("details", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndetails);
                this.columncurrentservicedata_Id = new global::System.Data.DataColumn("currentservicedata_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncurrentservicedata_Id);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public next_eventRow Newnext_eventRow() {
                return ((next_eventRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new next_eventRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(next_eventRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.next_eventRowChanged != null)) {
                    this.next_eventRowChanged(this, new next_eventRowChangeEvent(((next_eventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.next_eventRowChanging != null)) {
                    this.next_eventRowChanging(this, new next_eventRowChangeEvent(((next_eventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.next_eventRowDeleted != null)) {
                    this.next_eventRowDeleted(this, new next_eventRowChangeEvent(((next_eventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.next_eventRowDeleting != null)) {
                    this.next_eventRowDeleting(this, new next_eventRowChangeEvent(((next_eventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removenext_eventRow(next_eventRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "next_eventDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class currentservicedataRow : global::System.Data.DataRow {
            
            private currentservicedataDataTable tablecurrentservicedata;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal currentservicedataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecurrentservicedata = ((currentservicedataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string audio_track {
                get {
                    try {
                        return ((string)(this[this.tablecurrentservicedata.audio_trackColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'audio_track\' in table \'currentservicedata\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecurrentservicedata.audio_trackColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string video_channels {
                get {
                    try {
                        return ((string)(this[this.tablecurrentservicedata.video_channelsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'video_channels\' in table \'currentservicedata\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecurrentservicedata.video_channelsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int currentservicedata_Id {
                get {
                    return ((int)(this[this.tablecurrentservicedata.currentservicedata_IdColumn]));
                }
                set {
                    this[this.tablecurrentservicedata.currentservicedata_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaudio_trackNull() {
                return this.IsNull(this.tablecurrentservicedata.audio_trackColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaudio_trackNull() {
                this[this.tablecurrentservicedata.audio_trackColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isvideo_channelsNull() {
                return this.IsNull(this.tablecurrentservicedata.video_channelsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setvideo_channelsNull() {
                this[this.tablecurrentservicedata.video_channelsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public serviceRow[] GetserviceRows() {
                if ((this.Table.ChildRelations["currentservicedata_service"] == null)) {
                    return new serviceRow[0];
                }
                else {
                    return ((serviceRow[])(base.GetChildRows(this.Table.ChildRelations["currentservicedata_service"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public audio_channelsRow[] Getaudio_channelsRows() {
                if ((this.Table.ChildRelations["currentservicedata_audio_channels"] == null)) {
                    return new audio_channelsRow[0];
                }
                else {
                    return ((audio_channelsRow[])(base.GetChildRows(this.Table.ChildRelations["currentservicedata_audio_channels"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public current_eventRow[] Getcurrent_eventRows() {
                if ((this.Table.ChildRelations["currentservicedata_current_event"] == null)) {
                    return new current_eventRow[0];
                }
                else {
                    return ((current_eventRow[])(base.GetChildRows(this.Table.ChildRelations["currentservicedata_current_event"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public next_eventRow[] Getnext_eventRows() {
                if ((this.Table.ChildRelations["currentservicedata_next_event"] == null)) {
                    return new next_eventRow[0];
                }
                else {
                    return ((next_eventRow[])(base.GetChildRows(this.Table.ChildRelations["currentservicedata_next_event"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class serviceRow : global::System.Data.DataRow {
            
            private serviceDataTable tableservice;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal serviceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableservice = ((serviceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableservice.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableservice.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string reference {
                get {
                    try {
                        return ((string)(this[this.tableservice.referenceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'reference\' in table \'service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableservice.referenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int currentservicedata_Id {
                get {
                    try {
                        return ((int)(this[this.tableservice.currentservicedata_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'currentservicedata_Id\' in table \'service\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableservice.currentservicedata_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public currentservicedataRow currentservicedataRow {
                get {
                    return ((currentservicedataRow)(this.GetParentRow(this.Table.ParentRelations["currentservicedata_service"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["currentservicedata_service"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableservice.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableservice.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreferenceNull() {
                return this.IsNull(this.tableservice.referenceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreferenceNull() {
                this[this.tableservice.referenceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscurrentservicedata_IdNull() {
                return this.IsNull(this.tableservice.currentservicedata_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcurrentservicedata_IdNull() {
                this[this.tableservice.currentservicedata_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class audio_channelsRow : global::System.Data.DataRow {
            
            private audio_channelsDataTable tableaudio_channels;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal audio_channelsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableaudio_channels = ((audio_channelsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int audio_channels_Id {
                get {
                    return ((int)(this[this.tableaudio_channels.audio_channels_IdColumn]));
                }
                set {
                    this[this.tableaudio_channels.audio_channels_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int currentservicedata_Id {
                get {
                    try {
                        return ((int)(this[this.tableaudio_channels.currentservicedata_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'currentservicedata_Id\' in table \'audio_channels\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableaudio_channels.currentservicedata_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public currentservicedataRow currentservicedataRow {
                get {
                    return ((currentservicedataRow)(this.GetParentRow(this.Table.ParentRelations["currentservicedata_audio_channels"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["currentservicedata_audio_channels"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscurrentservicedata_IdNull() {
                return this.IsNull(this.tableaudio_channels.currentservicedata_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcurrentservicedata_IdNull() {
                this[this.tableaudio_channels.currentservicedata_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public channelRow[] GetchannelRows() {
                if ((this.Table.ChildRelations["audio_channels_channel"] == null)) {
                    return new channelRow[0];
                }
                else {
                    return ((channelRow[])(base.GetChildRows(this.Table.ChildRelations["audio_channels_channel"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class channelRow : global::System.Data.DataRow {
            
            private channelDataTable tablechannel;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal channelRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablechannel = ((channelDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pid {
                get {
                    try {
                        return ((string)(this[this.tablechannel.pidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pid\' in table \'channel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablechannel.pidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string selected {
                get {
                    try {
                        return ((string)(this[this.tablechannel.selectedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'selected\' in table \'channel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablechannel.selectedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablechannel.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'channel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablechannel.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int audio_channels_Id {
                get {
                    try {
                        return ((int)(this[this.tablechannel.audio_channels_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'audio_channels_Id\' in table \'channel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablechannel.audio_channels_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public audio_channelsRow audio_channelsRow {
                get {
                    return ((audio_channelsRow)(this.GetParentRow(this.Table.ParentRelations["audio_channels_channel"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["audio_channels_channel"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspidNull() {
                return this.IsNull(this.tablechannel.pidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpidNull() {
                this[this.tablechannel.pidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsselectedNull() {
                return this.IsNull(this.tablechannel.selectedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetselectedNull() {
                this[this.tablechannel.selectedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tablechannel.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tablechannel.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaudio_channels_IdNull() {
                return this.IsNull(this.tablechannel.audio_channels_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaudio_channels_IdNull() {
                this[this.tablechannel.audio_channels_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class current_eventRow : global::System.Data.DataRow {
            
            private current_eventDataTable tablecurrent_event;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal current_eventRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecurrent_event = ((current_eventDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string date {
                get {
                    try {
                        return ((string)(this[this.tablecurrent_event.dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'date\' in table \'current_event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecurrent_event.dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string time {
                get {
                    try {
                        return ((string)(this[this.tablecurrent_event.timeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'time\' in table \'current_event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecurrent_event.timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string start {
                get {
                    try {
                        return ((string)(this[this.tablecurrent_event.startColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'start\' in table \'current_event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecurrent_event.startColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string duration {
                get {
                    try {
                        return ((string)(this[this.tablecurrent_event.durationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'duration\' in table \'current_event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecurrent_event.durationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tablecurrent_event.descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'description\' in table \'current_event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecurrent_event.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string details {
                get {
                    try {
                        return ((string)(this[this.tablecurrent_event.detailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'details\' in table \'current_event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecurrent_event.detailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int currentservicedata_Id {
                get {
                    try {
                        return ((int)(this[this.tablecurrent_event.currentservicedata_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'currentservicedata_Id\' in table \'current_event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecurrent_event.currentservicedata_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public currentservicedataRow currentservicedataRow {
                get {
                    return ((currentservicedataRow)(this.GetParentRow(this.Table.ParentRelations["currentservicedata_current_event"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["currentservicedata_current_event"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateNull() {
                return this.IsNull(this.tablecurrent_event.dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateNull() {
                this[this.tablecurrent_event.dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstimeNull() {
                return this.IsNull(this.tablecurrent_event.timeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettimeNull() {
                this[this.tablecurrent_event.timeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstartNull() {
                return this.IsNull(this.tablecurrent_event.startColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstartNull() {
                this[this.tablecurrent_event.startColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdurationNull() {
                return this.IsNull(this.tablecurrent_event.durationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdurationNull() {
                this[this.tablecurrent_event.durationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tablecurrent_event.descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tablecurrent_event.descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdetailsNull() {
                return this.IsNull(this.tablecurrent_event.detailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdetailsNull() {
                this[this.tablecurrent_event.detailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscurrentservicedata_IdNull() {
                return this.IsNull(this.tablecurrent_event.currentservicedata_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcurrentservicedata_IdNull() {
                this[this.tablecurrent_event.currentservicedata_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class next_eventRow : global::System.Data.DataRow {
            
            private next_eventDataTable tablenext_event;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal next_eventRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablenext_event = ((next_eventDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string date {
                get {
                    try {
                        return ((string)(this[this.tablenext_event.dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'date\' in table \'next_event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenext_event.dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string time {
                get {
                    try {
                        return ((string)(this[this.tablenext_event.timeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'time\' in table \'next_event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenext_event.timeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string start {
                get {
                    try {
                        return ((string)(this[this.tablenext_event.startColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'start\' in table \'next_event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenext_event.startColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string duration {
                get {
                    try {
                        return ((string)(this[this.tablenext_event.durationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'duration\' in table \'next_event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenext_event.durationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tablenext_event.descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'description\' in table \'next_event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenext_event.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string details {
                get {
                    try {
                        return ((string)(this[this.tablenext_event.detailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'details\' in table \'next_event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenext_event.detailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int currentservicedata_Id {
                get {
                    try {
                        return ((int)(this[this.tablenext_event.currentservicedata_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'currentservicedata_Id\' in table \'next_event\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablenext_event.currentservicedata_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public currentservicedataRow currentservicedataRow {
                get {
                    return ((currentservicedataRow)(this.GetParentRow(this.Table.ParentRelations["currentservicedata_next_event"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["currentservicedata_next_event"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateNull() {
                return this.IsNull(this.tablenext_event.dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateNull() {
                this[this.tablenext_event.dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstimeNull() {
                return this.IsNull(this.tablenext_event.timeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettimeNull() {
                this[this.tablenext_event.timeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstartNull() {
                return this.IsNull(this.tablenext_event.startColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstartNull() {
                this[this.tablenext_event.startColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdurationNull() {
                return this.IsNull(this.tablenext_event.durationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdurationNull() {
                this[this.tablenext_event.durationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tablenext_event.descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tablenext_event.descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdetailsNull() {
                return this.IsNull(this.tablenext_event.detailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdetailsNull() {
                this[this.tablenext_event.detailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscurrentservicedata_IdNull() {
                return this.IsNull(this.tablenext_event.currentservicedata_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcurrentservicedata_IdNull() {
                this[this.tablenext_event.currentservicedata_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class currentservicedataRowChangeEvent : global::System.EventArgs {
            
            private currentservicedataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public currentservicedataRowChangeEvent(currentservicedataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public currentservicedataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class serviceRowChangeEvent : global::System.EventArgs {
            
            private serviceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public serviceRowChangeEvent(serviceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public serviceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class audio_channelsRowChangeEvent : global::System.EventArgs {
            
            private audio_channelsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public audio_channelsRowChangeEvent(audio_channelsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public audio_channelsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class channelRowChangeEvent : global::System.EventArgs {
            
            private channelRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public channelRowChangeEvent(channelRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public channelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class current_eventRowChangeEvent : global::System.EventArgs {
            
            private current_eventRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public current_eventRowChangeEvent(current_eventRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public current_eventRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class next_eventRowChangeEvent : global::System.EventArgs {
            
            private next_eventRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public next_eventRowChangeEvent(next_eventRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public next_eventRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591