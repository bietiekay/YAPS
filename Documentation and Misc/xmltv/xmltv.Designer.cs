//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Documentation_and_Misc.xmltv {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("NewDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class NewDataSet : global::System.Data.DataSet {
        
        private tvDataTable tabletv;
        
        private channelDataTable tablechannel;
        
        private _display_nameDataTable table_display_name;
        
        private iconDataTable tableicon;
        
        private programmeDataTable tableprogramme;
        
        private titleDataTable tabletitle;
        
        private _sub_titleDataTable table_sub_title;
        
        private descDataTable tabledesc;
        
        private creditsDataTable tablecredits;
        
        private producerDataTable tableproducer;
        
        private presenterDataTable tablepresenter;
        
        private guestDataTable tableguest;
        
        private directorDataTable tabledirector;
        
        private actorDataTable tableactor;
        
        private categoryDataTable tablecategory;
        
        private countryDataTable tablecountry;
        
        private global::System.Data.DataRelation relationtv_channel;
        
        private global::System.Data.DataRelation _relationchannel_display_name;
        
        private global::System.Data.DataRelation relationchannel_icon;
        
        private global::System.Data.DataRelation relationtv_programme;
        
        private global::System.Data.DataRelation relationprogramme_title;
        
        private global::System.Data.DataRelation _relationprogramme_sub_title;
        
        private global::System.Data.DataRelation relationprogramme_desc;
        
        private global::System.Data.DataRelation relationprogramme_credits;
        
        private global::System.Data.DataRelation relationcredits_producer;
        
        private global::System.Data.DataRelation relationcredits_presenter;
        
        private global::System.Data.DataRelation relationcredits_guest;
        
        private global::System.Data.DataRelation relationcredits_director;
        
        private global::System.Data.DataRelation relationcredits_actor;
        
        private global::System.Data.DataRelation relationprogramme_category;
        
        private global::System.Data.DataRelation relationprogramme_country;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NewDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected NewDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["tv"] != null)) {
                    base.Tables.Add(new tvDataTable(ds.Tables["tv"]));
                }
                if ((ds.Tables["channel"] != null)) {
                    base.Tables.Add(new channelDataTable(ds.Tables["channel"]));
                }
                if ((ds.Tables["display-name"] != null)) {
                    base.Tables.Add(new _display_nameDataTable(ds.Tables["display-name"]));
                }
                if ((ds.Tables["icon"] != null)) {
                    base.Tables.Add(new iconDataTable(ds.Tables["icon"]));
                }
                if ((ds.Tables["programme"] != null)) {
                    base.Tables.Add(new programmeDataTable(ds.Tables["programme"]));
                }
                if ((ds.Tables["title"] != null)) {
                    base.Tables.Add(new titleDataTable(ds.Tables["title"]));
                }
                if ((ds.Tables["sub-title"] != null)) {
                    base.Tables.Add(new _sub_titleDataTable(ds.Tables["sub-title"]));
                }
                if ((ds.Tables["desc"] != null)) {
                    base.Tables.Add(new descDataTable(ds.Tables["desc"]));
                }
                if ((ds.Tables["credits"] != null)) {
                    base.Tables.Add(new creditsDataTable(ds.Tables["credits"]));
                }
                if ((ds.Tables["producer"] != null)) {
                    base.Tables.Add(new producerDataTable(ds.Tables["producer"]));
                }
                if ((ds.Tables["presenter"] != null)) {
                    base.Tables.Add(new presenterDataTable(ds.Tables["presenter"]));
                }
                if ((ds.Tables["guest"] != null)) {
                    base.Tables.Add(new guestDataTable(ds.Tables["guest"]));
                }
                if ((ds.Tables["director"] != null)) {
                    base.Tables.Add(new directorDataTable(ds.Tables["director"]));
                }
                if ((ds.Tables["actor"] != null)) {
                    base.Tables.Add(new actorDataTable(ds.Tables["actor"]));
                }
                if ((ds.Tables["category"] != null)) {
                    base.Tables.Add(new categoryDataTable(ds.Tables["category"]));
                }
                if ((ds.Tables["country"] != null)) {
                    base.Tables.Add(new countryDataTable(ds.Tables["country"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tvDataTable tv {
            get {
                return this.tabletv;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public channelDataTable channel {
            get {
                return this.tablechannel;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _display_nameDataTable _display_name {
            get {
                return this.table_display_name;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public iconDataTable icon {
            get {
                return this.tableicon;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public programmeDataTable programme {
            get {
                return this.tableprogramme;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public titleDataTable title {
            get {
                return this.tabletitle;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _sub_titleDataTable _sub_title {
            get {
                return this.table_sub_title;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public descDataTable desc {
            get {
                return this.tabledesc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public creditsDataTable credits {
            get {
                return this.tablecredits;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public producerDataTable producer {
            get {
                return this.tableproducer;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public presenterDataTable presenter {
            get {
                return this.tablepresenter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public guestDataTable guest {
            get {
                return this.tableguest;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public directorDataTable director {
            get {
                return this.tabledirector;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public actorDataTable actor {
            get {
                return this.tableactor;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public categoryDataTable category {
            get {
                return this.tablecategory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public countryDataTable country {
            get {
                return this.tablecountry;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            NewDataSet cln = ((NewDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["tv"] != null)) {
                    base.Tables.Add(new tvDataTable(ds.Tables["tv"]));
                }
                if ((ds.Tables["channel"] != null)) {
                    base.Tables.Add(new channelDataTable(ds.Tables["channel"]));
                }
                if ((ds.Tables["display-name"] != null)) {
                    base.Tables.Add(new _display_nameDataTable(ds.Tables["display-name"]));
                }
                if ((ds.Tables["icon"] != null)) {
                    base.Tables.Add(new iconDataTable(ds.Tables["icon"]));
                }
                if ((ds.Tables["programme"] != null)) {
                    base.Tables.Add(new programmeDataTable(ds.Tables["programme"]));
                }
                if ((ds.Tables["title"] != null)) {
                    base.Tables.Add(new titleDataTable(ds.Tables["title"]));
                }
                if ((ds.Tables["sub-title"] != null)) {
                    base.Tables.Add(new _sub_titleDataTable(ds.Tables["sub-title"]));
                }
                if ((ds.Tables["desc"] != null)) {
                    base.Tables.Add(new descDataTable(ds.Tables["desc"]));
                }
                if ((ds.Tables["credits"] != null)) {
                    base.Tables.Add(new creditsDataTable(ds.Tables["credits"]));
                }
                if ((ds.Tables["producer"] != null)) {
                    base.Tables.Add(new producerDataTable(ds.Tables["producer"]));
                }
                if ((ds.Tables["presenter"] != null)) {
                    base.Tables.Add(new presenterDataTable(ds.Tables["presenter"]));
                }
                if ((ds.Tables["guest"] != null)) {
                    base.Tables.Add(new guestDataTable(ds.Tables["guest"]));
                }
                if ((ds.Tables["director"] != null)) {
                    base.Tables.Add(new directorDataTable(ds.Tables["director"]));
                }
                if ((ds.Tables["actor"] != null)) {
                    base.Tables.Add(new actorDataTable(ds.Tables["actor"]));
                }
                if ((ds.Tables["category"] != null)) {
                    base.Tables.Add(new categoryDataTable(ds.Tables["category"]));
                }
                if ((ds.Tables["country"] != null)) {
                    base.Tables.Add(new countryDataTable(ds.Tables["country"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabletv = ((tvDataTable)(base.Tables["tv"]));
            if ((initTable == true)) {
                if ((this.tabletv != null)) {
                    this.tabletv.InitVars();
                }
            }
            this.tablechannel = ((channelDataTable)(base.Tables["channel"]));
            if ((initTable == true)) {
                if ((this.tablechannel != null)) {
                    this.tablechannel.InitVars();
                }
            }
            this.table_display_name = ((_display_nameDataTable)(base.Tables["display-name"]));
            if ((initTable == true)) {
                if ((this.table_display_name != null)) {
                    this.table_display_name.InitVars();
                }
            }
            this.tableicon = ((iconDataTable)(base.Tables["icon"]));
            if ((initTable == true)) {
                if ((this.tableicon != null)) {
                    this.tableicon.InitVars();
                }
            }
            this.tableprogramme = ((programmeDataTable)(base.Tables["programme"]));
            if ((initTable == true)) {
                if ((this.tableprogramme != null)) {
                    this.tableprogramme.InitVars();
                }
            }
            this.tabletitle = ((titleDataTable)(base.Tables["title"]));
            if ((initTable == true)) {
                if ((this.tabletitle != null)) {
                    this.tabletitle.InitVars();
                }
            }
            this.table_sub_title = ((_sub_titleDataTable)(base.Tables["sub-title"]));
            if ((initTable == true)) {
                if ((this.table_sub_title != null)) {
                    this.table_sub_title.InitVars();
                }
            }
            this.tabledesc = ((descDataTable)(base.Tables["desc"]));
            if ((initTable == true)) {
                if ((this.tabledesc != null)) {
                    this.tabledesc.InitVars();
                }
            }
            this.tablecredits = ((creditsDataTable)(base.Tables["credits"]));
            if ((initTable == true)) {
                if ((this.tablecredits != null)) {
                    this.tablecredits.InitVars();
                }
            }
            this.tableproducer = ((producerDataTable)(base.Tables["producer"]));
            if ((initTable == true)) {
                if ((this.tableproducer != null)) {
                    this.tableproducer.InitVars();
                }
            }
            this.tablepresenter = ((presenterDataTable)(base.Tables["presenter"]));
            if ((initTable == true)) {
                if ((this.tablepresenter != null)) {
                    this.tablepresenter.InitVars();
                }
            }
            this.tableguest = ((guestDataTable)(base.Tables["guest"]));
            if ((initTable == true)) {
                if ((this.tableguest != null)) {
                    this.tableguest.InitVars();
                }
            }
            this.tabledirector = ((directorDataTable)(base.Tables["director"]));
            if ((initTable == true)) {
                if ((this.tabledirector != null)) {
                    this.tabledirector.InitVars();
                }
            }
            this.tableactor = ((actorDataTable)(base.Tables["actor"]));
            if ((initTable == true)) {
                if ((this.tableactor != null)) {
                    this.tableactor.InitVars();
                }
            }
            this.tablecategory = ((categoryDataTable)(base.Tables["category"]));
            if ((initTable == true)) {
                if ((this.tablecategory != null)) {
                    this.tablecategory.InitVars();
                }
            }
            this.tablecountry = ((countryDataTable)(base.Tables["country"]));
            if ((initTable == true)) {
                if ((this.tablecountry != null)) {
                    this.tablecountry.InitVars();
                }
            }
            this.relationtv_channel = this.Relations["tv_channel"];
            this._relationchannel_display_name = this.Relations["channel_display-name"];
            this.relationchannel_icon = this.Relations["channel_icon"];
            this.relationtv_programme = this.Relations["tv_programme"];
            this.relationprogramme_title = this.Relations["programme_title"];
            this._relationprogramme_sub_title = this.Relations["programme_sub-title"];
            this.relationprogramme_desc = this.Relations["programme_desc"];
            this.relationprogramme_credits = this.Relations["programme_credits"];
            this.relationcredits_producer = this.Relations["credits_producer"];
            this.relationcredits_presenter = this.Relations["credits_presenter"];
            this.relationcredits_guest = this.Relations["credits_guest"];
            this.relationcredits_director = this.Relations["credits_director"];
            this.relationcredits_actor = this.Relations["credits_actor"];
            this.relationprogramme_category = this.Relations["programme_category"];
            this.relationprogramme_country = this.Relations["programme_country"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "NewDataSet";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabletv = new tvDataTable();
            base.Tables.Add(this.tabletv);
            this.tablechannel = new channelDataTable();
            base.Tables.Add(this.tablechannel);
            this.table_display_name = new _display_nameDataTable();
            base.Tables.Add(this.table_display_name);
            this.tableicon = new iconDataTable();
            base.Tables.Add(this.tableicon);
            this.tableprogramme = new programmeDataTable();
            base.Tables.Add(this.tableprogramme);
            this.tabletitle = new titleDataTable();
            base.Tables.Add(this.tabletitle);
            this.table_sub_title = new _sub_titleDataTable();
            base.Tables.Add(this.table_sub_title);
            this.tabledesc = new descDataTable();
            base.Tables.Add(this.tabledesc);
            this.tablecredits = new creditsDataTable();
            base.Tables.Add(this.tablecredits);
            this.tableproducer = new producerDataTable();
            base.Tables.Add(this.tableproducer);
            this.tablepresenter = new presenterDataTable();
            base.Tables.Add(this.tablepresenter);
            this.tableguest = new guestDataTable();
            base.Tables.Add(this.tableguest);
            this.tabledirector = new directorDataTable();
            base.Tables.Add(this.tabledirector);
            this.tableactor = new actorDataTable();
            base.Tables.Add(this.tableactor);
            this.tablecategory = new categoryDataTable();
            base.Tables.Add(this.tablecategory);
            this.tablecountry = new countryDataTable();
            base.Tables.Add(this.tablecountry);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("tv_channel", new global::System.Data.DataColumn[] {
                        this.tabletv.tv_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablechannel.tv_IdColumn});
            this.tablechannel.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("channel_display-name", new global::System.Data.DataColumn[] {
                        this.tablechannel.channel_IdColumn}, new global::System.Data.DataColumn[] {
                        this.table_display_name.channel_IdColumn});
            this.table_display_name.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("channel_icon", new global::System.Data.DataColumn[] {
                        this.tablechannel.channel_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableicon.channel_IdColumn});
            this.tableicon.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("tv_programme", new global::System.Data.DataColumn[] {
                        this.tabletv.tv_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprogramme.tv_IdColumn});
            this.tableprogramme.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("programme_title", new global::System.Data.DataColumn[] {
                        this.tableprogramme.programme_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletitle.programme_IdColumn});
            this.tabletitle.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("programme_sub-title", new global::System.Data.DataColumn[] {
                        this.tableprogramme.programme_IdColumn}, new global::System.Data.DataColumn[] {
                        this.table_sub_title.programme_IdColumn});
            this.table_sub_title.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("programme_desc", new global::System.Data.DataColumn[] {
                        this.tableprogramme.programme_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledesc.programme_IdColumn});
            this.tabledesc.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("programme_credits", new global::System.Data.DataColumn[] {
                        this.tableprogramme.programme_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecredits.programme_IdColumn});
            this.tablecredits.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("credits_producer", new global::System.Data.DataColumn[] {
                        this.tablecredits.credits_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableproducer.credits_IdColumn});
            this.tableproducer.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("credits_presenter", new global::System.Data.DataColumn[] {
                        this.tablecredits.credits_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablepresenter.credits_IdColumn});
            this.tablepresenter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("credits_guest", new global::System.Data.DataColumn[] {
                        this.tablecredits.credits_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableguest.credits_IdColumn});
            this.tableguest.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("credits_director", new global::System.Data.DataColumn[] {
                        this.tablecredits.credits_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledirector.credits_IdColumn});
            this.tabledirector.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("credits_actor", new global::System.Data.DataColumn[] {
                        this.tablecredits.credits_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableactor.credits_IdColumn});
            this.tableactor.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("programme_category", new global::System.Data.DataColumn[] {
                        this.tableprogramme.programme_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecategory.programme_IdColumn});
            this.tablecategory.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("programme_country", new global::System.Data.DataColumn[] {
                        this.tableprogramme.programme_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecountry.programme_IdColumn});
            this.tablecountry.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationtv_channel = new global::System.Data.DataRelation("tv_channel", new global::System.Data.DataColumn[] {
                        this.tabletv.tv_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablechannel.tv_IdColumn}, false);
            this.relationtv_channel.Nested = true;
            this.Relations.Add(this.relationtv_channel);
            this._relationchannel_display_name = new global::System.Data.DataRelation("channel_display-name", new global::System.Data.DataColumn[] {
                        this.tablechannel.channel_IdColumn}, new global::System.Data.DataColumn[] {
                        this.table_display_name.channel_IdColumn}, false);
            this._relationchannel_display_name.Nested = true;
            this.Relations.Add(this._relationchannel_display_name);
            this.relationchannel_icon = new global::System.Data.DataRelation("channel_icon", new global::System.Data.DataColumn[] {
                        this.tablechannel.channel_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableicon.channel_IdColumn}, false);
            this.relationchannel_icon.Nested = true;
            this.Relations.Add(this.relationchannel_icon);
            this.relationtv_programme = new global::System.Data.DataRelation("tv_programme", new global::System.Data.DataColumn[] {
                        this.tabletv.tv_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableprogramme.tv_IdColumn}, false);
            this.relationtv_programme.Nested = true;
            this.Relations.Add(this.relationtv_programme);
            this.relationprogramme_title = new global::System.Data.DataRelation("programme_title", new global::System.Data.DataColumn[] {
                        this.tableprogramme.programme_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabletitle.programme_IdColumn}, false);
            this.relationprogramme_title.Nested = true;
            this.Relations.Add(this.relationprogramme_title);
            this._relationprogramme_sub_title = new global::System.Data.DataRelation("programme_sub-title", new global::System.Data.DataColumn[] {
                        this.tableprogramme.programme_IdColumn}, new global::System.Data.DataColumn[] {
                        this.table_sub_title.programme_IdColumn}, false);
            this._relationprogramme_sub_title.Nested = true;
            this.Relations.Add(this._relationprogramme_sub_title);
            this.relationprogramme_desc = new global::System.Data.DataRelation("programme_desc", new global::System.Data.DataColumn[] {
                        this.tableprogramme.programme_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledesc.programme_IdColumn}, false);
            this.relationprogramme_desc.Nested = true;
            this.Relations.Add(this.relationprogramme_desc);
            this.relationprogramme_credits = new global::System.Data.DataRelation("programme_credits", new global::System.Data.DataColumn[] {
                        this.tableprogramme.programme_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecredits.programme_IdColumn}, false);
            this.relationprogramme_credits.Nested = true;
            this.Relations.Add(this.relationprogramme_credits);
            this.relationcredits_producer = new global::System.Data.DataRelation("credits_producer", new global::System.Data.DataColumn[] {
                        this.tablecredits.credits_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableproducer.credits_IdColumn}, false);
            this.relationcredits_producer.Nested = true;
            this.Relations.Add(this.relationcredits_producer);
            this.relationcredits_presenter = new global::System.Data.DataRelation("credits_presenter", new global::System.Data.DataColumn[] {
                        this.tablecredits.credits_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablepresenter.credits_IdColumn}, false);
            this.relationcredits_presenter.Nested = true;
            this.Relations.Add(this.relationcredits_presenter);
            this.relationcredits_guest = new global::System.Data.DataRelation("credits_guest", new global::System.Data.DataColumn[] {
                        this.tablecredits.credits_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableguest.credits_IdColumn}, false);
            this.relationcredits_guest.Nested = true;
            this.Relations.Add(this.relationcredits_guest);
            this.relationcredits_director = new global::System.Data.DataRelation("credits_director", new global::System.Data.DataColumn[] {
                        this.tablecredits.credits_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tabledirector.credits_IdColumn}, false);
            this.relationcredits_director.Nested = true;
            this.Relations.Add(this.relationcredits_director);
            this.relationcredits_actor = new global::System.Data.DataRelation("credits_actor", new global::System.Data.DataColumn[] {
                        this.tablecredits.credits_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableactor.credits_IdColumn}, false);
            this.relationcredits_actor.Nested = true;
            this.Relations.Add(this.relationcredits_actor);
            this.relationprogramme_category = new global::System.Data.DataRelation("programme_category", new global::System.Data.DataColumn[] {
                        this.tableprogramme.programme_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecategory.programme_IdColumn}, false);
            this.relationprogramme_category.Nested = true;
            this.Relations.Add(this.relationprogramme_category);
            this.relationprogramme_country = new global::System.Data.DataRelation("programme_country", new global::System.Data.DataColumn[] {
                        this.tableprogramme.programme_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablecountry.programme_IdColumn}, false);
            this.relationprogramme_country.Nested = true;
            this.Relations.Add(this.relationprogramme_country);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetv() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializechannel() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_display_name() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeicon() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeprogramme() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetitle() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_sub_title() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedesc() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecredits() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeproducer() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializepresenter() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeguest() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedirector() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeactor() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecategory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecountry() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void tvRowChangeEventHandler(object sender, tvRowChangeEvent e);
        
        public delegate void channelRowChangeEventHandler(object sender, channelRowChangeEvent e);
        
        public delegate void _display_nameRowChangeEventHandler(object sender, _display_nameRowChangeEvent e);
        
        public delegate void iconRowChangeEventHandler(object sender, iconRowChangeEvent e);
        
        public delegate void programmeRowChangeEventHandler(object sender, programmeRowChangeEvent e);
        
        public delegate void titleRowChangeEventHandler(object sender, titleRowChangeEvent e);
        
        public delegate void _sub_titleRowChangeEventHandler(object sender, _sub_titleRowChangeEvent e);
        
        public delegate void descRowChangeEventHandler(object sender, descRowChangeEvent e);
        
        public delegate void creditsRowChangeEventHandler(object sender, creditsRowChangeEvent e);
        
        public delegate void producerRowChangeEventHandler(object sender, producerRowChangeEvent e);
        
        public delegate void presenterRowChangeEventHandler(object sender, presenterRowChangeEvent e);
        
        public delegate void guestRowChangeEventHandler(object sender, guestRowChangeEvent e);
        
        public delegate void directorRowChangeEventHandler(object sender, directorRowChangeEvent e);
        
        public delegate void actorRowChangeEventHandler(object sender, actorRowChangeEvent e);
        
        public delegate void categoryRowChangeEventHandler(object sender, categoryRowChangeEvent e);
        
        public delegate void countryRowChangeEventHandler(object sender, countryRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tvDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn column_source_info_url;
            
            private global::System.Data.DataColumn column_source_data_url;
            
            private global::System.Data.DataColumn column_generator_info_name;
            
            private global::System.Data.DataColumn column_generator_info_url;
            
            private global::System.Data.DataColumn columntv_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tvDataTable() {
                this.TableName = "tv";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tvDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tvDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _source_info_urlColumn {
                get {
                    return this.column_source_info_url;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _source_data_urlColumn {
                get {
                    return this.column_source_data_url;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _generator_info_nameColumn {
                get {
                    return this.column_generator_info_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _generator_info_urlColumn {
                get {
                    return this.column_generator_info_url;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tv_IdColumn {
                get {
                    return this.columntv_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tvRow this[int index] {
                get {
                    return ((tvRow)(this.Rows[index]));
                }
            }
            
            public event tvRowChangeEventHandler tvRowChanging;
            
            public event tvRowChangeEventHandler tvRowChanged;
            
            public event tvRowChangeEventHandler tvRowDeleting;
            
            public event tvRowChangeEventHandler tvRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtvRow(tvRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tvRow AddtvRow(string _source_info_url, string _source_data_url, string _generator_info_name, string _generator_info_url) {
                tvRow rowtvRow = ((tvRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        _source_info_url,
                        _source_data_url,
                        _generator_info_name,
                        _generator_info_url,
                        null};
                rowtvRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtvRow);
                return rowtvRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tvDataTable cln = ((tvDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tvDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column_source_info_url = base.Columns["source-info-url"];
                this.column_source_data_url = base.Columns["source-data-url"];
                this.column_generator_info_name = base.Columns["generator-info-name"];
                this.column_generator_info_url = base.Columns["generator-info-url"];
                this.columntv_Id = base.Columns["tv_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column_source_info_url = new global::System.Data.DataColumn("source-info-url", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.column_source_info_url);
                this.column_source_data_url = new global::System.Data.DataColumn("source-data-url", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.column_source_data_url);
                this.column_generator_info_name = new global::System.Data.DataColumn("generator-info-name", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.column_generator_info_name);
                this.column_generator_info_url = new global::System.Data.DataColumn("generator-info-url", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.column_generator_info_url);
                this.columntv_Id = new global::System.Data.DataColumn("tv_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columntv_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columntv_Id}, true));
                this.column_source_info_url.Namespace = "";
                this.column_source_data_url.Namespace = "";
                this.column_generator_info_name.Namespace = "";
                this.column_generator_info_url.Namespace = "";
                this.columntv_Id.AutoIncrement = true;
                this.columntv_Id.AllowDBNull = false;
                this.columntv_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tvRow NewtvRow() {
                return ((tvRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tvRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tvRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tvRowChanged != null)) {
                    this.tvRowChanged(this, new tvRowChangeEvent(((tvRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tvRowChanging != null)) {
                    this.tvRowChanging(this, new tvRowChangeEvent(((tvRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tvRowDeleted != null)) {
                    this.tvRowDeleted(this, new tvRowChangeEvent(((tvRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tvRowDeleting != null)) {
                    this.tvRowDeleting(this, new tvRowChangeEvent(((tvRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetvRow(tvRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tvDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class channelDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnchannel_Id;
            
            private global::System.Data.DataColumn columntv_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public channelDataTable() {
                this.TableName = "channel";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal channelDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected channelDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn channel_IdColumn {
                get {
                    return this.columnchannel_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tv_IdColumn {
                get {
                    return this.columntv_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public channelRow this[int index] {
                get {
                    return ((channelRow)(this.Rows[index]));
                }
            }
            
            public event channelRowChangeEventHandler channelRowChanging;
            
            public event channelRowChangeEventHandler channelRowChanged;
            
            public event channelRowChangeEventHandler channelRowDeleting;
            
            public event channelRowChangeEventHandler channelRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddchannelRow(channelRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public channelRow AddchannelRow(string id, tvRow parenttvRowBytv_channel) {
                channelRow rowchannelRow = ((channelRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        null,
                        null};
                if ((parenttvRowBytv_channel != null)) {
                    columnValuesArray[2] = parenttvRowBytv_channel[4];
                }
                rowchannelRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowchannelRow);
                return rowchannelRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                channelDataTable cln = ((channelDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new channelDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnchannel_Id = base.Columns["channel_Id"];
                this.columntv_Id = base.Columns["tv_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnid);
                this.columnchannel_Id = new global::System.Data.DataColumn("channel_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnchannel_Id);
                this.columntv_Id = new global::System.Data.DataColumn("tv_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columntv_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnchannel_Id}, true));
                this.columnid.Namespace = "";
                this.columnchannel_Id.AutoIncrement = true;
                this.columnchannel_Id.AllowDBNull = false;
                this.columnchannel_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public channelRow NewchannelRow() {
                return ((channelRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new channelRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(channelRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.channelRowChanged != null)) {
                    this.channelRowChanged(this, new channelRowChangeEvent(((channelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.channelRowChanging != null)) {
                    this.channelRowChanging(this, new channelRowChangeEvent(((channelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.channelRowDeleted != null)) {
                    this.channelRowDeleted(this, new channelRowChangeEvent(((channelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.channelRowDeleting != null)) {
                    this.channelRowDeleting(this, new channelRowChangeEvent(((channelRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovechannelRow(channelRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "channelDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _display_nameDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn column_display_name_Text;
            
            private global::System.Data.DataColumn columnchannel_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _display_nameDataTable() {
                this.TableName = "display-name";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _display_nameDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _display_nameDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _display_name_TextColumn {
                get {
                    return this.column_display_name_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn channel_IdColumn {
                get {
                    return this.columnchannel_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _display_nameRow this[int index] {
                get {
                    return ((_display_nameRow)(this.Rows[index]));
                }
            }
            
            public event _display_nameRowChangeEventHandler _display_nameRowChanging;
            
            public event _display_nameRowChangeEventHandler _display_nameRowChanged;
            
            public event _display_nameRowChangeEventHandler _display_nameRowDeleting;
            
            public event _display_nameRowChangeEventHandler _display_nameRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_display_nameRow(_display_nameRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _display_nameRow Add_display_nameRow(string lang, string _display_name_Text, channelRow _parentchannelRowBychannel_display_name) {
                _display_nameRow row_display_nameRow = ((_display_nameRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        lang,
                        _display_name_Text,
                        null};
                if ((_parentchannelRowBychannel_display_name != null)) {
                    columnValuesArray[2] = _parentchannelRowBychannel_display_name[1];
                }
                row_display_nameRow.ItemArray = columnValuesArray;
                this.Rows.Add(row_display_nameRow);
                return row_display_nameRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                _display_nameDataTable cln = ((_display_nameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new _display_nameDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.column_display_name_Text = base.Columns["display-name_Text"];
                this.columnchannel_Id = base.Columns["channel_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.column_display_name_Text = new global::System.Data.DataColumn("display-name_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.column_display_name_Text);
                this.columnchannel_Id = new global::System.Data.DataColumn("channel_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnchannel_Id);
                this.columnlang.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _display_nameRow New_display_nameRow() {
                return ((_display_nameRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new _display_nameRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(_display_nameRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._display_nameRowChanged != null)) {
                    this._display_nameRowChanged(this, new _display_nameRowChangeEvent(((_display_nameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._display_nameRowChanging != null)) {
                    this._display_nameRowChanging(this, new _display_nameRowChangeEvent(((_display_nameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._display_nameRowDeleted != null)) {
                    this._display_nameRowDeleted(this, new _display_nameRowChangeEvent(((_display_nameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._display_nameRowDeleting != null)) {
                    this._display_nameRowDeleting(this, new _display_nameRowChangeEvent(((_display_nameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_display_nameRow(_display_nameRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_display_nameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class iconDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnsrc;
            
            private global::System.Data.DataColumn columnchannel_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public iconDataTable() {
                this.TableName = "icon";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal iconDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected iconDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn srcColumn {
                get {
                    return this.columnsrc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn channel_IdColumn {
                get {
                    return this.columnchannel_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public iconRow this[int index] {
                get {
                    return ((iconRow)(this.Rows[index]));
                }
            }
            
            public event iconRowChangeEventHandler iconRowChanging;
            
            public event iconRowChangeEventHandler iconRowChanged;
            
            public event iconRowChangeEventHandler iconRowDeleting;
            
            public event iconRowChangeEventHandler iconRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddiconRow(iconRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public iconRow AddiconRow(string src, channelRow parentchannelRowBychannel_icon) {
                iconRow rowiconRow = ((iconRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        src,
                        null};
                if ((parentchannelRowBychannel_icon != null)) {
                    columnValuesArray[1] = parentchannelRowBychannel_icon[1];
                }
                rowiconRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowiconRow);
                return rowiconRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                iconDataTable cln = ((iconDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new iconDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsrc = base.Columns["src"];
                this.columnchannel_Id = base.Columns["channel_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsrc = new global::System.Data.DataColumn("src", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnsrc);
                this.columnchannel_Id = new global::System.Data.DataColumn("channel_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnchannel_Id);
                this.columnsrc.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public iconRow NewiconRow() {
                return ((iconRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new iconRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(iconRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.iconRowChanged != null)) {
                    this.iconRowChanged(this, new iconRowChangeEvent(((iconRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.iconRowChanging != null)) {
                    this.iconRowChanging(this, new iconRowChangeEvent(((iconRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.iconRowDeleted != null)) {
                    this.iconRowDeleted(this, new iconRowChangeEvent(((iconRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.iconRowDeleting != null)) {
                    this.iconRowDeleting(this, new iconRowChangeEvent(((iconRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveiconRow(iconRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "iconDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class programmeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnstart;
            
            private global::System.Data.DataColumn columndate;
            
            private global::System.Data.DataColumn columnstop;
            
            private global::System.Data.DataColumn columnshowview;
            
            private global::System.Data.DataColumn columnchannel;
            
            private global::System.Data.DataColumn columnprogramme_Id;
            
            private global::System.Data.DataColumn columntv_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public programmeDataTable() {
                this.TableName = "programme";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal programmeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected programmeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn startColumn {
                get {
                    return this.columnstart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dateColumn {
                get {
                    return this.columndate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stopColumn {
                get {
                    return this.columnstop;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn showviewColumn {
                get {
                    return this.columnshowview;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn channelColumn {
                get {
                    return this.columnchannel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn programme_IdColumn {
                get {
                    return this.columnprogramme_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tv_IdColumn {
                get {
                    return this.columntv_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public programmeRow this[int index] {
                get {
                    return ((programmeRow)(this.Rows[index]));
                }
            }
            
            public event programmeRowChangeEventHandler programmeRowChanging;
            
            public event programmeRowChangeEventHandler programmeRowChanged;
            
            public event programmeRowChangeEventHandler programmeRowDeleting;
            
            public event programmeRowChangeEventHandler programmeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddprogrammeRow(programmeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public programmeRow AddprogrammeRow(string start, string date, string stop, string showview, string channel, tvRow parenttvRowBytv_programme) {
                programmeRow rowprogrammeRow = ((programmeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        start,
                        date,
                        stop,
                        showview,
                        channel,
                        null,
                        null};
                if ((parenttvRowBytv_programme != null)) {
                    columnValuesArray[6] = parenttvRowBytv_programme[4];
                }
                rowprogrammeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowprogrammeRow);
                return rowprogrammeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                programmeDataTable cln = ((programmeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new programmeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstart = base.Columns["start"];
                this.columndate = base.Columns["date"];
                this.columnstop = base.Columns["stop"];
                this.columnshowview = base.Columns["showview"];
                this.columnchannel = base.Columns["channel"];
                this.columnprogramme_Id = base.Columns["programme_Id"];
                this.columntv_Id = base.Columns["tv_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstart = new global::System.Data.DataColumn("start", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnstart);
                this.columndate = new global::System.Data.DataColumn("date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate);
                this.columnstop = new global::System.Data.DataColumn("stop", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnstop);
                this.columnshowview = new global::System.Data.DataColumn("showview", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnshowview);
                this.columnchannel = new global::System.Data.DataColumn("channel", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnchannel);
                this.columnprogramme_Id = new global::System.Data.DataColumn("programme_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnprogramme_Id);
                this.columntv_Id = new global::System.Data.DataColumn("tv_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columntv_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnprogramme_Id}, true));
                this.columnstart.Namespace = "";
                this.columnstop.Namespace = "";
                this.columnshowview.Namespace = "";
                this.columnchannel.Namespace = "";
                this.columnprogramme_Id.AutoIncrement = true;
                this.columnprogramme_Id.AllowDBNull = false;
                this.columnprogramme_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public programmeRow NewprogrammeRow() {
                return ((programmeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new programmeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(programmeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.programmeRowChanged != null)) {
                    this.programmeRowChanged(this, new programmeRowChangeEvent(((programmeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.programmeRowChanging != null)) {
                    this.programmeRowChanging(this, new programmeRowChangeEvent(((programmeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.programmeRowDeleted != null)) {
                    this.programmeRowDeleted(this, new programmeRowChangeEvent(((programmeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.programmeRowDeleting != null)) {
                    this.programmeRowDeleting(this, new programmeRowChangeEvent(((programmeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveprogrammeRow(programmeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "programmeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class titleDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn columntitle_Text;
            
            private global::System.Data.DataColumn columnprogramme_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public titleDataTable() {
                this.TableName = "title";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal titleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected titleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn title_TextColumn {
                get {
                    return this.columntitle_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn programme_IdColumn {
                get {
                    return this.columnprogramme_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public titleRow this[int index] {
                get {
                    return ((titleRow)(this.Rows[index]));
                }
            }
            
            public event titleRowChangeEventHandler titleRowChanging;
            
            public event titleRowChangeEventHandler titleRowChanged;
            
            public event titleRowChangeEventHandler titleRowDeleting;
            
            public event titleRowChangeEventHandler titleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtitleRow(titleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public titleRow AddtitleRow(string lang, string title_Text, programmeRow parentprogrammeRowByprogramme_title) {
                titleRow rowtitleRow = ((titleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        lang,
                        title_Text,
                        null};
                if ((parentprogrammeRowByprogramme_title != null)) {
                    columnValuesArray[2] = parentprogrammeRowByprogramme_title[5];
                }
                rowtitleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtitleRow);
                return rowtitleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                titleDataTable cln = ((titleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new titleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columntitle_Text = base.Columns["title_Text"];
                this.columnprogramme_Id = base.Columns["programme_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columntitle_Text = new global::System.Data.DataColumn("title_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columntitle_Text);
                this.columnprogramme_Id = new global::System.Data.DataColumn("programme_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnprogramme_Id);
                this.columnlang.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public titleRow NewtitleRow() {
                return ((titleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new titleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(titleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.titleRowChanged != null)) {
                    this.titleRowChanged(this, new titleRowChangeEvent(((titleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.titleRowChanging != null)) {
                    this.titleRowChanging(this, new titleRowChangeEvent(((titleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.titleRowDeleted != null)) {
                    this.titleRowDeleted(this, new titleRowChangeEvent(((titleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.titleRowDeleting != null)) {
                    this.titleRowDeleting(this, new titleRowChangeEvent(((titleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetitleRow(titleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "titleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _sub_titleDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn column_sub_title_Text;
            
            private global::System.Data.DataColumn columnprogramme_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _sub_titleDataTable() {
                this.TableName = "sub-title";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _sub_titleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _sub_titleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _sub_title_TextColumn {
                get {
                    return this.column_sub_title_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn programme_IdColumn {
                get {
                    return this.columnprogramme_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _sub_titleRow this[int index] {
                get {
                    return ((_sub_titleRow)(this.Rows[index]));
                }
            }
            
            public event _sub_titleRowChangeEventHandler _sub_titleRowChanging;
            
            public event _sub_titleRowChangeEventHandler _sub_titleRowChanged;
            
            public event _sub_titleRowChangeEventHandler _sub_titleRowDeleting;
            
            public event _sub_titleRowChangeEventHandler _sub_titleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_sub_titleRow(_sub_titleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _sub_titleRow Add_sub_titleRow(string lang, string _sub_title_Text, programmeRow _parentprogrammeRowByprogramme_sub_title) {
                _sub_titleRow row_sub_titleRow = ((_sub_titleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        lang,
                        _sub_title_Text,
                        null};
                if ((_parentprogrammeRowByprogramme_sub_title != null)) {
                    columnValuesArray[2] = _parentprogrammeRowByprogramme_sub_title[5];
                }
                row_sub_titleRow.ItemArray = columnValuesArray;
                this.Rows.Add(row_sub_titleRow);
                return row_sub_titleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                _sub_titleDataTable cln = ((_sub_titleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new _sub_titleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.column_sub_title_Text = base.Columns["sub-title_Text"];
                this.columnprogramme_Id = base.Columns["programme_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.column_sub_title_Text = new global::System.Data.DataColumn("sub-title_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.column_sub_title_Text);
                this.columnprogramme_Id = new global::System.Data.DataColumn("programme_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnprogramme_Id);
                this.columnlang.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _sub_titleRow New_sub_titleRow() {
                return ((_sub_titleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new _sub_titleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(_sub_titleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._sub_titleRowChanged != null)) {
                    this._sub_titleRowChanged(this, new _sub_titleRowChangeEvent(((_sub_titleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._sub_titleRowChanging != null)) {
                    this._sub_titleRowChanging(this, new _sub_titleRowChangeEvent(((_sub_titleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._sub_titleRowDeleted != null)) {
                    this._sub_titleRowDeleted(this, new _sub_titleRowChangeEvent(((_sub_titleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._sub_titleRowDeleting != null)) {
                    this._sub_titleRowDeleting(this, new _sub_titleRowChangeEvent(((_sub_titleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_sub_titleRow(_sub_titleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_sub_titleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class descDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn columndesc_Text;
            
            private global::System.Data.DataColumn columnprogramme_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descDataTable() {
                this.TableName = "desc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal descDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected descDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn desc_TextColumn {
                get {
                    return this.columndesc_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn programme_IdColumn {
                get {
                    return this.columnprogramme_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descRow this[int index] {
                get {
                    return ((descRow)(this.Rows[index]));
                }
            }
            
            public event descRowChangeEventHandler descRowChanging;
            
            public event descRowChangeEventHandler descRowChanged;
            
            public event descRowChangeEventHandler descRowDeleting;
            
            public event descRowChangeEventHandler descRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddescRow(descRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descRow AdddescRow(string lang, string desc_Text, programmeRow parentprogrammeRowByprogramme_desc) {
                descRow rowdescRow = ((descRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        lang,
                        desc_Text,
                        null};
                if ((parentprogrammeRowByprogramme_desc != null)) {
                    columnValuesArray[2] = parentprogrammeRowByprogramme_desc[5];
                }
                rowdescRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdescRow);
                return rowdescRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                descDataTable cln = ((descDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new descDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columndesc_Text = base.Columns["desc_Text"];
                this.columnprogramme_Id = base.Columns["programme_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columndesc_Text = new global::System.Data.DataColumn("desc_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columndesc_Text);
                this.columnprogramme_Id = new global::System.Data.DataColumn("programme_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnprogramme_Id);
                this.columnlang.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descRow NewdescRow() {
                return ((descRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new descRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(descRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.descRowChanged != null)) {
                    this.descRowChanged(this, new descRowChangeEvent(((descRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.descRowChanging != null)) {
                    this.descRowChanging(this, new descRowChangeEvent(((descRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.descRowDeleted != null)) {
                    this.descRowDeleted(this, new descRowChangeEvent(((descRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.descRowDeleting != null)) {
                    this.descRowDeleting(this, new descRowChangeEvent(((descRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedescRow(descRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "descDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class creditsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columncredits_Id;
            
            private global::System.Data.DataColumn columnprogramme_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public creditsDataTable() {
                this.TableName = "credits";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal creditsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected creditsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn credits_IdColumn {
                get {
                    return this.columncredits_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn programme_IdColumn {
                get {
                    return this.columnprogramme_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public creditsRow this[int index] {
                get {
                    return ((creditsRow)(this.Rows[index]));
                }
            }
            
            public event creditsRowChangeEventHandler creditsRowChanging;
            
            public event creditsRowChangeEventHandler creditsRowChanged;
            
            public event creditsRowChangeEventHandler creditsRowDeleting;
            
            public event creditsRowChangeEventHandler creditsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcreditsRow(creditsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public creditsRow AddcreditsRow(programmeRow parentprogrammeRowByprogramme_credits) {
                creditsRow rowcreditsRow = ((creditsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentprogrammeRowByprogramme_credits != null)) {
                    columnValuesArray[1] = parentprogrammeRowByprogramme_credits[5];
                }
                rowcreditsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcreditsRow);
                return rowcreditsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                creditsDataTable cln = ((creditsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new creditsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncredits_Id = base.Columns["credits_Id"];
                this.columnprogramme_Id = base.Columns["programme_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncredits_Id = new global::System.Data.DataColumn("credits_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncredits_Id);
                this.columnprogramme_Id = new global::System.Data.DataColumn("programme_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnprogramme_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columncredits_Id}, true));
                this.columncredits_Id.AutoIncrement = true;
                this.columncredits_Id.AllowDBNull = false;
                this.columncredits_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public creditsRow NewcreditsRow() {
                return ((creditsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new creditsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(creditsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.creditsRowChanged != null)) {
                    this.creditsRowChanged(this, new creditsRowChangeEvent(((creditsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.creditsRowChanging != null)) {
                    this.creditsRowChanging(this, new creditsRowChangeEvent(((creditsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.creditsRowDeleted != null)) {
                    this.creditsRowDeleted(this, new creditsRowChangeEvent(((creditsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.creditsRowDeleting != null)) {
                    this.creditsRowDeleting(this, new creditsRowChangeEvent(((creditsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecreditsRow(creditsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "creditsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class producerDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnproducer_Text;
            
            private global::System.Data.DataColumn columncredits_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public producerDataTable() {
                this.TableName = "producer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal producerDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected producerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn producer_TextColumn {
                get {
                    return this.columnproducer_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn credits_IdColumn {
                get {
                    return this.columncredits_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public producerRow this[int index] {
                get {
                    return ((producerRow)(this.Rows[index]));
                }
            }
            
            public event producerRowChangeEventHandler producerRowChanging;
            
            public event producerRowChangeEventHandler producerRowChanged;
            
            public event producerRowChangeEventHandler producerRowDeleting;
            
            public event producerRowChangeEventHandler producerRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddproducerRow(producerRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public producerRow AddproducerRow(string producer_Text, creditsRow parentcreditsRowBycredits_producer) {
                producerRow rowproducerRow = ((producerRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        producer_Text,
                        null};
                if ((parentcreditsRowBycredits_producer != null)) {
                    columnValuesArray[1] = parentcreditsRowBycredits_producer[0];
                }
                rowproducerRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowproducerRow);
                return rowproducerRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                producerDataTable cln = ((producerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new producerDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnproducer_Text = base.Columns["producer_Text"];
                this.columncredits_Id = base.Columns["credits_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnproducer_Text = new global::System.Data.DataColumn("producer_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnproducer_Text);
                this.columncredits_Id = new global::System.Data.DataColumn("credits_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncredits_Id);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public producerRow NewproducerRow() {
                return ((producerRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new producerRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(producerRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.producerRowChanged != null)) {
                    this.producerRowChanged(this, new producerRowChangeEvent(((producerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.producerRowChanging != null)) {
                    this.producerRowChanging(this, new producerRowChangeEvent(((producerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.producerRowDeleted != null)) {
                    this.producerRowDeleted(this, new producerRowChangeEvent(((producerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.producerRowDeleting != null)) {
                    this.producerRowDeleting(this, new producerRowChangeEvent(((producerRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveproducerRow(producerRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "producerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class presenterDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnpresenter_Text;
            
            private global::System.Data.DataColumn columncredits_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public presenterDataTable() {
                this.TableName = "presenter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal presenterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected presenterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn presenter_TextColumn {
                get {
                    return this.columnpresenter_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn credits_IdColumn {
                get {
                    return this.columncredits_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public presenterRow this[int index] {
                get {
                    return ((presenterRow)(this.Rows[index]));
                }
            }
            
            public event presenterRowChangeEventHandler presenterRowChanging;
            
            public event presenterRowChangeEventHandler presenterRowChanged;
            
            public event presenterRowChangeEventHandler presenterRowDeleting;
            
            public event presenterRowChangeEventHandler presenterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpresenterRow(presenterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public presenterRow AddpresenterRow(string presenter_Text, creditsRow parentcreditsRowBycredits_presenter) {
                presenterRow rowpresenterRow = ((presenterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        presenter_Text,
                        null};
                if ((parentcreditsRowBycredits_presenter != null)) {
                    columnValuesArray[1] = parentcreditsRowBycredits_presenter[0];
                }
                rowpresenterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowpresenterRow);
                return rowpresenterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                presenterDataTable cln = ((presenterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new presenterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpresenter_Text = base.Columns["presenter_Text"];
                this.columncredits_Id = base.Columns["credits_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpresenter_Text = new global::System.Data.DataColumn("presenter_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnpresenter_Text);
                this.columncredits_Id = new global::System.Data.DataColumn("credits_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncredits_Id);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public presenterRow NewpresenterRow() {
                return ((presenterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new presenterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(presenterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.presenterRowChanged != null)) {
                    this.presenterRowChanged(this, new presenterRowChangeEvent(((presenterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.presenterRowChanging != null)) {
                    this.presenterRowChanging(this, new presenterRowChangeEvent(((presenterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.presenterRowDeleted != null)) {
                    this.presenterRowDeleted(this, new presenterRowChangeEvent(((presenterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.presenterRowDeleting != null)) {
                    this.presenterRowDeleting(this, new presenterRowChangeEvent(((presenterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepresenterRow(presenterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "presenterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class guestDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnguest_Text;
            
            private global::System.Data.DataColumn columncredits_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public guestDataTable() {
                this.TableName = "guest";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal guestDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected guestDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn guest_TextColumn {
                get {
                    return this.columnguest_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn credits_IdColumn {
                get {
                    return this.columncredits_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public guestRow this[int index] {
                get {
                    return ((guestRow)(this.Rows[index]));
                }
            }
            
            public event guestRowChangeEventHandler guestRowChanging;
            
            public event guestRowChangeEventHandler guestRowChanged;
            
            public event guestRowChangeEventHandler guestRowDeleting;
            
            public event guestRowChangeEventHandler guestRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddguestRow(guestRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public guestRow AddguestRow(string guest_Text, creditsRow parentcreditsRowBycredits_guest) {
                guestRow rowguestRow = ((guestRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        guest_Text,
                        null};
                if ((parentcreditsRowBycredits_guest != null)) {
                    columnValuesArray[1] = parentcreditsRowBycredits_guest[0];
                }
                rowguestRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowguestRow);
                return rowguestRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                guestDataTable cln = ((guestDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new guestDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnguest_Text = base.Columns["guest_Text"];
                this.columncredits_Id = base.Columns["credits_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnguest_Text = new global::System.Data.DataColumn("guest_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnguest_Text);
                this.columncredits_Id = new global::System.Data.DataColumn("credits_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncredits_Id);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public guestRow NewguestRow() {
                return ((guestRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new guestRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(guestRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.guestRowChanged != null)) {
                    this.guestRowChanged(this, new guestRowChangeEvent(((guestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.guestRowChanging != null)) {
                    this.guestRowChanging(this, new guestRowChangeEvent(((guestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.guestRowDeleted != null)) {
                    this.guestRowDeleted(this, new guestRowChangeEvent(((guestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.guestRowDeleting != null)) {
                    this.guestRowDeleting(this, new guestRowChangeEvent(((guestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveguestRow(guestRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "guestDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class directorDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columndirector_Text;
            
            private global::System.Data.DataColumn columncredits_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public directorDataTable() {
                this.TableName = "director";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal directorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected directorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn director_TextColumn {
                get {
                    return this.columndirector_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn credits_IdColumn {
                get {
                    return this.columncredits_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public directorRow this[int index] {
                get {
                    return ((directorRow)(this.Rows[index]));
                }
            }
            
            public event directorRowChangeEventHandler directorRowChanging;
            
            public event directorRowChangeEventHandler directorRowChanged;
            
            public event directorRowChangeEventHandler directorRowDeleting;
            
            public event directorRowChangeEventHandler directorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddirectorRow(directorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public directorRow AdddirectorRow(string director_Text, creditsRow parentcreditsRowBycredits_director) {
                directorRow rowdirectorRow = ((directorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        director_Text,
                        null};
                if ((parentcreditsRowBycredits_director != null)) {
                    columnValuesArray[1] = parentcreditsRowBycredits_director[0];
                }
                rowdirectorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdirectorRow);
                return rowdirectorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                directorDataTable cln = ((directorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new directorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndirector_Text = base.Columns["director_Text"];
                this.columncredits_Id = base.Columns["credits_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndirector_Text = new global::System.Data.DataColumn("director_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columndirector_Text);
                this.columncredits_Id = new global::System.Data.DataColumn("credits_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncredits_Id);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public directorRow NewdirectorRow() {
                return ((directorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new directorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(directorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.directorRowChanged != null)) {
                    this.directorRowChanged(this, new directorRowChangeEvent(((directorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.directorRowChanging != null)) {
                    this.directorRowChanging(this, new directorRowChangeEvent(((directorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.directorRowDeleted != null)) {
                    this.directorRowDeleted(this, new directorRowChangeEvent(((directorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.directorRowDeleting != null)) {
                    this.directorRowDeleting(this, new directorRowChangeEvent(((directorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedirectorRow(directorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "directorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class actorDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnactor_Text;
            
            private global::System.Data.DataColumn columncredits_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actorDataTable() {
                this.TableName = "actor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal actorDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected actorDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn actor_TextColumn {
                get {
                    return this.columnactor_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn credits_IdColumn {
                get {
                    return this.columncredits_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actorRow this[int index] {
                get {
                    return ((actorRow)(this.Rows[index]));
                }
            }
            
            public event actorRowChangeEventHandler actorRowChanging;
            
            public event actorRowChangeEventHandler actorRowChanged;
            
            public event actorRowChangeEventHandler actorRowDeleting;
            
            public event actorRowChangeEventHandler actorRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddactorRow(actorRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actorRow AddactorRow(string actor_Text, creditsRow parentcreditsRowBycredits_actor) {
                actorRow rowactorRow = ((actorRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        actor_Text,
                        null};
                if ((parentcreditsRowBycredits_actor != null)) {
                    columnValuesArray[1] = parentcreditsRowBycredits_actor[0];
                }
                rowactorRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowactorRow);
                return rowactorRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                actorDataTable cln = ((actorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new actorDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnactor_Text = base.Columns["actor_Text"];
                this.columncredits_Id = base.Columns["credits_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnactor_Text = new global::System.Data.DataColumn("actor_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnactor_Text);
                this.columncredits_Id = new global::System.Data.DataColumn("credits_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncredits_Id);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actorRow NewactorRow() {
                return ((actorRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new actorRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(actorRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.actorRowChanged != null)) {
                    this.actorRowChanged(this, new actorRowChangeEvent(((actorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.actorRowChanging != null)) {
                    this.actorRowChanging(this, new actorRowChangeEvent(((actorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.actorRowDeleted != null)) {
                    this.actorRowDeleted(this, new actorRowChangeEvent(((actorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.actorRowDeleting != null)) {
                    this.actorRowDeleting(this, new actorRowChangeEvent(((actorRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveactorRow(actorRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "actorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class categoryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn columncategory_Text;
            
            private global::System.Data.DataColumn columnprogramme_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public categoryDataTable() {
                this.TableName = "category";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal categoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected categoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn category_TextColumn {
                get {
                    return this.columncategory_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn programme_IdColumn {
                get {
                    return this.columnprogramme_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public categoryRow this[int index] {
                get {
                    return ((categoryRow)(this.Rows[index]));
                }
            }
            
            public event categoryRowChangeEventHandler categoryRowChanging;
            
            public event categoryRowChangeEventHandler categoryRowChanged;
            
            public event categoryRowChangeEventHandler categoryRowDeleting;
            
            public event categoryRowChangeEventHandler categoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcategoryRow(categoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public categoryRow AddcategoryRow(string lang, string category_Text, programmeRow parentprogrammeRowByprogramme_category) {
                categoryRow rowcategoryRow = ((categoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        lang,
                        category_Text,
                        null};
                if ((parentprogrammeRowByprogramme_category != null)) {
                    columnValuesArray[2] = parentprogrammeRowByprogramme_category[5];
                }
                rowcategoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcategoryRow);
                return rowcategoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                categoryDataTable cln = ((categoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new categoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columncategory_Text = base.Columns["category_Text"];
                this.columnprogramme_Id = base.Columns["programme_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columncategory_Text = new global::System.Data.DataColumn("category_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columncategory_Text);
                this.columnprogramme_Id = new global::System.Data.DataColumn("programme_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnprogramme_Id);
                this.columnlang.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public categoryRow NewcategoryRow() {
                return ((categoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new categoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(categoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.categoryRowChanged != null)) {
                    this.categoryRowChanged(this, new categoryRowChangeEvent(((categoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.categoryRowChanging != null)) {
                    this.categoryRowChanging(this, new categoryRowChangeEvent(((categoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.categoryRowDeleted != null)) {
                    this.categoryRowDeleted(this, new categoryRowChangeEvent(((categoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.categoryRowDeleting != null)) {
                    this.categoryRowDeleting(this, new categoryRowChangeEvent(((categoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecategoryRow(categoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "categoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class countryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnlang;
            
            private global::System.Data.DataColumn columncountry_Text;
            
            private global::System.Data.DataColumn columnprogramme_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public countryDataTable() {
                this.TableName = "country";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal countryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected countryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn country_TextColumn {
                get {
                    return this.columncountry_Text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn programme_IdColumn {
                get {
                    return this.columnprogramme_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public countryRow this[int index] {
                get {
                    return ((countryRow)(this.Rows[index]));
                }
            }
            
            public event countryRowChangeEventHandler countryRowChanging;
            
            public event countryRowChangeEventHandler countryRowChanged;
            
            public event countryRowChangeEventHandler countryRowDeleting;
            
            public event countryRowChangeEventHandler countryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcountryRow(countryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public countryRow AddcountryRow(string lang, string country_Text, programmeRow parentprogrammeRowByprogramme_country) {
                countryRow rowcountryRow = ((countryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        lang,
                        country_Text,
                        null};
                if ((parentprogrammeRowByprogramme_country != null)) {
                    columnValuesArray[2] = parentprogrammeRowByprogramme_country[5];
                }
                rowcountryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowcountryRow);
                return rowcountryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                countryDataTable cln = ((countryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new countryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columncountry_Text = base.Columns["country_Text"];
                this.columnprogramme_Id = base.Columns["programme_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new global::System.Data.DataColumn("lang", typeof(string), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columncountry_Text = new global::System.Data.DataColumn("country_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columncountry_Text);
                this.columnprogramme_Id = new global::System.Data.DataColumn("programme_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnprogramme_Id);
                this.columnlang.Namespace = "";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public countryRow NewcountryRow() {
                return ((countryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new countryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(countryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.countryRowChanged != null)) {
                    this.countryRowChanged(this, new countryRowChangeEvent(((countryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.countryRowChanging != null)) {
                    this.countryRowChanging(this, new countryRowChangeEvent(((countryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.countryRowDeleted != null)) {
                    this.countryRowDeleted(this, new countryRowChangeEvent(((countryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.countryRowDeleting != null)) {
                    this.countryRowDeleting(this, new countryRowChangeEvent(((countryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecountryRow(countryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "countryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tvRow : global::System.Data.DataRow {
            
            private tvDataTable tabletv;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tvRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletv = ((tvDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _source_info_url {
                get {
                    try {
                        return ((string)(this[this.tabletv._source_info_urlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'source-info-url\' in table \'tv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletv._source_info_urlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _source_data_url {
                get {
                    try {
                        return ((string)(this[this.tabletv._source_data_urlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'source-data-url\' in table \'tv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletv._source_data_urlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _generator_info_name {
                get {
                    try {
                        return ((string)(this[this.tabletv._generator_info_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'generator-info-name\' in table \'tv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletv._generator_info_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _generator_info_url {
                get {
                    try {
                        return ((string)(this[this.tabletv._generator_info_urlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'generator-info-url\' in table \'tv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletv._generator_info_urlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tv_Id {
                get {
                    return ((int)(this[this.tabletv.tv_IdColumn]));
                }
                set {
                    this[this.tabletv.tv_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_source_info_urlNull() {
                return this.IsNull(this.tabletv._source_info_urlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_source_info_urlNull() {
                this[this.tabletv._source_info_urlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_source_data_urlNull() {
                return this.IsNull(this.tabletv._source_data_urlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_source_data_urlNull() {
                this[this.tabletv._source_data_urlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_generator_info_nameNull() {
                return this.IsNull(this.tabletv._generator_info_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_generator_info_nameNull() {
                this[this.tabletv._generator_info_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_generator_info_urlNull() {
                return this.IsNull(this.tabletv._generator_info_urlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_generator_info_urlNull() {
                this[this.tabletv._generator_info_urlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public channelRow[] GetchannelRows() {
                if ((this.Table.ChildRelations["tv_channel"] == null)) {
                    return new channelRow[0];
                }
                else {
                    return ((channelRow[])(base.GetChildRows(this.Table.ChildRelations["tv_channel"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public programmeRow[] GetprogrammeRows() {
                if ((this.Table.ChildRelations["tv_programme"] == null)) {
                    return new programmeRow[0];
                }
                else {
                    return ((programmeRow[])(base.GetChildRows(this.Table.ChildRelations["tv_programme"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class channelRow : global::System.Data.DataRow {
            
            private channelDataTable tablechannel;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal channelRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablechannel = ((channelDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    try {
                        return ((string)(this[this.tablechannel.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'channel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablechannel.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int channel_Id {
                get {
                    return ((int)(this[this.tablechannel.channel_IdColumn]));
                }
                set {
                    this[this.tablechannel.channel_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tv_Id {
                get {
                    try {
                        return ((int)(this[this.tablechannel.tv_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tv_Id\' in table \'channel\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablechannel.tv_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tvRow tvRow {
                get {
                    return ((tvRow)(this.GetParentRow(this.Table.ParentRelations["tv_channel"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["tv_channel"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tablechannel.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tablechannel.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istv_IdNull() {
                return this.IsNull(this.tablechannel.tv_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settv_IdNull() {
                this[this.tablechannel.tv_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _display_nameRow[] _Getdisplay_nameRows() {
                if ((this.Table.ChildRelations["channel_display-name"] == null)) {
                    return new _display_nameRow[0];
                }
                else {
                    return ((_display_nameRow[])(base.GetChildRows(this.Table.ChildRelations["channel_display-name"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public iconRow[] GeticonRows() {
                if ((this.Table.ChildRelations["channel_icon"] == null)) {
                    return new iconRow[0];
                }
                else {
                    return ((iconRow[])(base.GetChildRows(this.Table.ChildRelations["channel_icon"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _display_nameRow : global::System.Data.DataRow {
            
            private _display_nameDataTable table_display_name;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _display_nameRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_display_name = ((_display_nameDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    try {
                        return ((string)(this[this.table_display_name.langColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lang\' in table \'display-name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_display_name.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _display_name_Text {
                get {
                    try {
                        return ((string)(this[this.table_display_name._display_name_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'display-name_Text\' in table \'display-name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_display_name._display_name_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int channel_Id {
                get {
                    try {
                        return ((int)(this[this.table_display_name.channel_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'channel_Id\' in table \'display-name\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_display_name.channel_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public channelRow channelRow {
                get {
                    return ((channelRow)(this.GetParentRow(this.Table.ParentRelations["channel_display-name"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["channel_display-name"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslangNull() {
                return this.IsNull(this.table_display_name.langColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlangNull() {
                this[this.table_display_name.langColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_display_name_TextNull() {
                return this.IsNull(this.table_display_name._display_name_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_display_name_TextNull() {
                this[this.table_display_name._display_name_TextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ischannel_IdNull() {
                return this.IsNull(this.table_display_name.channel_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setchannel_IdNull() {
                this[this.table_display_name.channel_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class iconRow : global::System.Data.DataRow {
            
            private iconDataTable tableicon;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal iconRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableicon = ((iconDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string src {
                get {
                    try {
                        return ((string)(this[this.tableicon.srcColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'src\' in table \'icon\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableicon.srcColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int channel_Id {
                get {
                    try {
                        return ((int)(this[this.tableicon.channel_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'channel_Id\' in table \'icon\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableicon.channel_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public channelRow channelRow {
                get {
                    return ((channelRow)(this.GetParentRow(this.Table.ParentRelations["channel_icon"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["channel_icon"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssrcNull() {
                return this.IsNull(this.tableicon.srcColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsrcNull() {
                this[this.tableicon.srcColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ischannel_IdNull() {
                return this.IsNull(this.tableicon.channel_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setchannel_IdNull() {
                this[this.tableicon.channel_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class programmeRow : global::System.Data.DataRow {
            
            private programmeDataTable tableprogramme;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal programmeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableprogramme = ((programmeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string start {
                get {
                    try {
                        return ((string)(this[this.tableprogramme.startColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'start\' in table \'programme\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprogramme.startColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string date {
                get {
                    try {
                        return ((string)(this[this.tableprogramme.dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'date\' in table \'programme\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprogramme.dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string stop {
                get {
                    try {
                        return ((string)(this[this.tableprogramme.stopColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'stop\' in table \'programme\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprogramme.stopColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string showview {
                get {
                    try {
                        return ((string)(this[this.tableprogramme.showviewColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'showview\' in table \'programme\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprogramme.showviewColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string channel {
                get {
                    try {
                        return ((string)(this[this.tableprogramme.channelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'channel\' in table \'programme\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprogramme.channelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int programme_Id {
                get {
                    return ((int)(this[this.tableprogramme.programme_IdColumn]));
                }
                set {
                    this[this.tableprogramme.programme_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tv_Id {
                get {
                    try {
                        return ((int)(this[this.tableprogramme.tv_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tv_Id\' in table \'programme\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableprogramme.tv_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tvRow tvRow {
                get {
                    return ((tvRow)(this.GetParentRow(this.Table.ParentRelations["tv_programme"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["tv_programme"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstartNull() {
                return this.IsNull(this.tableprogramme.startColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstartNull() {
                this[this.tableprogramme.startColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdateNull() {
                return this.IsNull(this.tableprogramme.dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdateNull() {
                this[this.tableprogramme.dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstopNull() {
                return this.IsNull(this.tableprogramme.stopColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstopNull() {
                this[this.tableprogramme.stopColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsshowviewNull() {
                return this.IsNull(this.tableprogramme.showviewColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetshowviewNull() {
                this[this.tableprogramme.showviewColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IschannelNull() {
                return this.IsNull(this.tableprogramme.channelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetchannelNull() {
                this[this.tableprogramme.channelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istv_IdNull() {
                return this.IsNull(this.tableprogramme.tv_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settv_IdNull() {
                this[this.tableprogramme.tv_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public titleRow[] GettitleRows() {
                if ((this.Table.ChildRelations["programme_title"] == null)) {
                    return new titleRow[0];
                }
                else {
                    return ((titleRow[])(base.GetChildRows(this.Table.ChildRelations["programme_title"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _sub_titleRow[] _Getsub_titleRows() {
                if ((this.Table.ChildRelations["programme_sub-title"] == null)) {
                    return new _sub_titleRow[0];
                }
                else {
                    return ((_sub_titleRow[])(base.GetChildRows(this.Table.ChildRelations["programme_sub-title"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descRow[] GetdescRows() {
                if ((this.Table.ChildRelations["programme_desc"] == null)) {
                    return new descRow[0];
                }
                else {
                    return ((descRow[])(base.GetChildRows(this.Table.ChildRelations["programme_desc"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public creditsRow[] GetcreditsRows() {
                if ((this.Table.ChildRelations["programme_credits"] == null)) {
                    return new creditsRow[0];
                }
                else {
                    return ((creditsRow[])(base.GetChildRows(this.Table.ChildRelations["programme_credits"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public categoryRow[] GetcategoryRows() {
                if ((this.Table.ChildRelations["programme_category"] == null)) {
                    return new categoryRow[0];
                }
                else {
                    return ((categoryRow[])(base.GetChildRows(this.Table.ChildRelations["programme_category"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public countryRow[] GetcountryRows() {
                if ((this.Table.ChildRelations["programme_country"] == null)) {
                    return new countryRow[0];
                }
                else {
                    return ((countryRow[])(base.GetChildRows(this.Table.ChildRelations["programme_country"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class titleRow : global::System.Data.DataRow {
            
            private titleDataTable tabletitle;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal titleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletitle = ((titleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    try {
                        return ((string)(this[this.tabletitle.langColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lang\' in table \'title\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletitle.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string title_Text {
                get {
                    try {
                        return ((string)(this[this.tabletitle.title_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'title_Text\' in table \'title\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletitle.title_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int programme_Id {
                get {
                    try {
                        return ((int)(this[this.tabletitle.programme_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'programme_Id\' in table \'title\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletitle.programme_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public programmeRow programmeRow {
                get {
                    return ((programmeRow)(this.GetParentRow(this.Table.ParentRelations["programme_title"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["programme_title"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslangNull() {
                return this.IsNull(this.tabletitle.langColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlangNull() {
                this[this.tabletitle.langColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istitle_TextNull() {
                return this.IsNull(this.tabletitle.title_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settitle_TextNull() {
                this[this.tabletitle.title_TextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprogramme_IdNull() {
                return this.IsNull(this.tabletitle.programme_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprogramme_IdNull() {
                this[this.tabletitle.programme_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _sub_titleRow : global::System.Data.DataRow {
            
            private _sub_titleDataTable table_sub_title;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _sub_titleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_sub_title = ((_sub_titleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    try {
                        return ((string)(this[this.table_sub_title.langColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lang\' in table \'sub-title\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_sub_title.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _sub_title_Text {
                get {
                    try {
                        return ((string)(this[this.table_sub_title._sub_title_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sub-title_Text\' in table \'sub-title\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_sub_title._sub_title_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int programme_Id {
                get {
                    try {
                        return ((int)(this[this.table_sub_title.programme_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'programme_Id\' in table \'sub-title\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_sub_title.programme_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public programmeRow programmeRow {
                get {
                    return ((programmeRow)(this.GetParentRow(this.Table.ParentRelations["programme_sub-title"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["programme_sub-title"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslangNull() {
                return this.IsNull(this.table_sub_title.langColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlangNull() {
                this[this.table_sub_title.langColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_sub_title_TextNull() {
                return this.IsNull(this.table_sub_title._sub_title_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_sub_title_TextNull() {
                this[this.table_sub_title._sub_title_TextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprogramme_IdNull() {
                return this.IsNull(this.table_sub_title.programme_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprogramme_IdNull() {
                this[this.table_sub_title.programme_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class descRow : global::System.Data.DataRow {
            
            private descDataTable tabledesc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal descRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledesc = ((descDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    try {
                        return ((string)(this[this.tabledesc.langColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lang\' in table \'desc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledesc.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string desc_Text {
                get {
                    try {
                        return ((string)(this[this.tabledesc.desc_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'desc_Text\' in table \'desc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledesc.desc_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int programme_Id {
                get {
                    try {
                        return ((int)(this[this.tabledesc.programme_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'programme_Id\' in table \'desc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledesc.programme_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public programmeRow programmeRow {
                get {
                    return ((programmeRow)(this.GetParentRow(this.Table.ParentRelations["programme_desc"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["programme_desc"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslangNull() {
                return this.IsNull(this.tabledesc.langColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlangNull() {
                this[this.tabledesc.langColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdesc_TextNull() {
                return this.IsNull(this.tabledesc.desc_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdesc_TextNull() {
                this[this.tabledesc.desc_TextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprogramme_IdNull() {
                return this.IsNull(this.tabledesc.programme_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprogramme_IdNull() {
                this[this.tabledesc.programme_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class creditsRow : global::System.Data.DataRow {
            
            private creditsDataTable tablecredits;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal creditsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecredits = ((creditsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int credits_Id {
                get {
                    return ((int)(this[this.tablecredits.credits_IdColumn]));
                }
                set {
                    this[this.tablecredits.credits_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int programme_Id {
                get {
                    try {
                        return ((int)(this[this.tablecredits.programme_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'programme_Id\' in table \'credits\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecredits.programme_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public programmeRow programmeRow {
                get {
                    return ((programmeRow)(this.GetParentRow(this.Table.ParentRelations["programme_credits"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["programme_credits"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprogramme_IdNull() {
                return this.IsNull(this.tablecredits.programme_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprogramme_IdNull() {
                this[this.tablecredits.programme_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public producerRow[] GetproducerRows() {
                if ((this.Table.ChildRelations["credits_producer"] == null)) {
                    return new producerRow[0];
                }
                else {
                    return ((producerRow[])(base.GetChildRows(this.Table.ChildRelations["credits_producer"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public presenterRow[] GetpresenterRows() {
                if ((this.Table.ChildRelations["credits_presenter"] == null)) {
                    return new presenterRow[0];
                }
                else {
                    return ((presenterRow[])(base.GetChildRows(this.Table.ChildRelations["credits_presenter"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public guestRow[] GetguestRows() {
                if ((this.Table.ChildRelations["credits_guest"] == null)) {
                    return new guestRow[0];
                }
                else {
                    return ((guestRow[])(base.GetChildRows(this.Table.ChildRelations["credits_guest"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public directorRow[] GetdirectorRows() {
                if ((this.Table.ChildRelations["credits_director"] == null)) {
                    return new directorRow[0];
                }
                else {
                    return ((directorRow[])(base.GetChildRows(this.Table.ChildRelations["credits_director"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actorRow[] GetactorRows() {
                if ((this.Table.ChildRelations["credits_actor"] == null)) {
                    return new actorRow[0];
                }
                else {
                    return ((actorRow[])(base.GetChildRows(this.Table.ChildRelations["credits_actor"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class producerRow : global::System.Data.DataRow {
            
            private producerDataTable tableproducer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal producerRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableproducer = ((producerDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string producer_Text {
                get {
                    try {
                        return ((string)(this[this.tableproducer.producer_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'producer_Text\' in table \'producer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproducer.producer_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int credits_Id {
                get {
                    try {
                        return ((int)(this[this.tableproducer.credits_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'credits_Id\' in table \'producer\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproducer.credits_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public creditsRow creditsRow {
                get {
                    return ((creditsRow)(this.GetParentRow(this.Table.ParentRelations["credits_producer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["credits_producer"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isproducer_TextNull() {
                return this.IsNull(this.tableproducer.producer_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setproducer_TextNull() {
                this[this.tableproducer.producer_TextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscredits_IdNull() {
                return this.IsNull(this.tableproducer.credits_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcredits_IdNull() {
                this[this.tableproducer.credits_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class presenterRow : global::System.Data.DataRow {
            
            private presenterDataTable tablepresenter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal presenterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablepresenter = ((presenterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string presenter_Text {
                get {
                    try {
                        return ((string)(this[this.tablepresenter.presenter_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'presenter_Text\' in table \'presenter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepresenter.presenter_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int credits_Id {
                get {
                    try {
                        return ((int)(this[this.tablepresenter.credits_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'credits_Id\' in table \'presenter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablepresenter.credits_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public creditsRow creditsRow {
                get {
                    return ((creditsRow)(this.GetParentRow(this.Table.ParentRelations["credits_presenter"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["credits_presenter"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispresenter_TextNull() {
                return this.IsNull(this.tablepresenter.presenter_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpresenter_TextNull() {
                this[this.tablepresenter.presenter_TextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscredits_IdNull() {
                return this.IsNull(this.tablepresenter.credits_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcredits_IdNull() {
                this[this.tablepresenter.credits_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class guestRow : global::System.Data.DataRow {
            
            private guestDataTable tableguest;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal guestRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableguest = ((guestDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string guest_Text {
                get {
                    try {
                        return ((string)(this[this.tableguest.guest_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'guest_Text\' in table \'guest\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableguest.guest_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int credits_Id {
                get {
                    try {
                        return ((int)(this[this.tableguest.credits_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'credits_Id\' in table \'guest\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableguest.credits_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public creditsRow creditsRow {
                get {
                    return ((creditsRow)(this.GetParentRow(this.Table.ParentRelations["credits_guest"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["credits_guest"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isguest_TextNull() {
                return this.IsNull(this.tableguest.guest_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setguest_TextNull() {
                this[this.tableguest.guest_TextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscredits_IdNull() {
                return this.IsNull(this.tableguest.credits_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcredits_IdNull() {
                this[this.tableguest.credits_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class directorRow : global::System.Data.DataRow {
            
            private directorDataTable tabledirector;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal directorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledirector = ((directorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string director_Text {
                get {
                    try {
                        return ((string)(this[this.tabledirector.director_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'director_Text\' in table \'director\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledirector.director_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int credits_Id {
                get {
                    try {
                        return ((int)(this[this.tabledirector.credits_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'credits_Id\' in table \'director\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledirector.credits_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public creditsRow creditsRow {
                get {
                    return ((creditsRow)(this.GetParentRow(this.Table.ParentRelations["credits_director"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["credits_director"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdirector_TextNull() {
                return this.IsNull(this.tabledirector.director_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdirector_TextNull() {
                this[this.tabledirector.director_TextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscredits_IdNull() {
                return this.IsNull(this.tabledirector.credits_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcredits_IdNull() {
                this[this.tabledirector.credits_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class actorRow : global::System.Data.DataRow {
            
            private actorDataTable tableactor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal actorRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableactor = ((actorDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string actor_Text {
                get {
                    try {
                        return ((string)(this[this.tableactor.actor_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'actor_Text\' in table \'actor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableactor.actor_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int credits_Id {
                get {
                    try {
                        return ((int)(this[this.tableactor.credits_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'credits_Id\' in table \'actor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableactor.credits_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public creditsRow creditsRow {
                get {
                    return ((creditsRow)(this.GetParentRow(this.Table.ParentRelations["credits_actor"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["credits_actor"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isactor_TextNull() {
                return this.IsNull(this.tableactor.actor_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setactor_TextNull() {
                this[this.tableactor.actor_TextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscredits_IdNull() {
                return this.IsNull(this.tableactor.credits_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcredits_IdNull() {
                this[this.tableactor.credits_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class categoryRow : global::System.Data.DataRow {
            
            private categoryDataTable tablecategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal categoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecategory = ((categoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    try {
                        return ((string)(this[this.tablecategory.langColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lang\' in table \'category\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecategory.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string category_Text {
                get {
                    try {
                        return ((string)(this[this.tablecategory.category_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'category_Text\' in table \'category\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecategory.category_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int programme_Id {
                get {
                    try {
                        return ((int)(this[this.tablecategory.programme_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'programme_Id\' in table \'category\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecategory.programme_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public programmeRow programmeRow {
                get {
                    return ((programmeRow)(this.GetParentRow(this.Table.ParentRelations["programme_category"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["programme_category"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslangNull() {
                return this.IsNull(this.tablecategory.langColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlangNull() {
                this[this.tablecategory.langColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscategory_TextNull() {
                return this.IsNull(this.tablecategory.category_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcategory_TextNull() {
                this[this.tablecategory.category_TextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprogramme_IdNull() {
                return this.IsNull(this.tablecategory.programme_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprogramme_IdNull() {
                this[this.tablecategory.programme_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class countryRow : global::System.Data.DataRow {
            
            private countryDataTable tablecountry;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal countryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecountry = ((countryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    try {
                        return ((string)(this[this.tablecountry.langColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lang\' in table \'country\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecountry.langColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string country_Text {
                get {
                    try {
                        return ((string)(this[this.tablecountry.country_TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'country_Text\' in table \'country\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecountry.country_TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int programme_Id {
                get {
                    try {
                        return ((int)(this[this.tablecountry.programme_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'programme_Id\' in table \'country\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecountry.programme_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public programmeRow programmeRow {
                get {
                    return ((programmeRow)(this.GetParentRow(this.Table.ParentRelations["programme_country"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["programme_country"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslangNull() {
                return this.IsNull(this.tablecountry.langColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlangNull() {
                this[this.tablecountry.langColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscountry_TextNull() {
                return this.IsNull(this.tablecountry.country_TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcountry_TextNull() {
                this[this.tablecountry.country_TextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprogramme_IdNull() {
                return this.IsNull(this.tablecountry.programme_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprogramme_IdNull() {
                this[this.tablecountry.programme_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tvRowChangeEvent : global::System.EventArgs {
            
            private tvRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tvRowChangeEvent(tvRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tvRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class channelRowChangeEvent : global::System.EventArgs {
            
            private channelRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public channelRowChangeEvent(channelRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public channelRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _display_nameRowChangeEvent : global::System.EventArgs {
            
            private _display_nameRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _display_nameRowChangeEvent(_display_nameRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _display_nameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class iconRowChangeEvent : global::System.EventArgs {
            
            private iconRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public iconRowChangeEvent(iconRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public iconRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class programmeRowChangeEvent : global::System.EventArgs {
            
            private programmeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public programmeRowChangeEvent(programmeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public programmeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class titleRowChangeEvent : global::System.EventArgs {
            
            private titleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public titleRowChangeEvent(titleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public titleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _sub_titleRowChangeEvent : global::System.EventArgs {
            
            private _sub_titleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _sub_titleRowChangeEvent(_sub_titleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _sub_titleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class descRowChangeEvent : global::System.EventArgs {
            
            private descRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descRowChangeEvent(descRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class creditsRowChangeEvent : global::System.EventArgs {
            
            private creditsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public creditsRowChangeEvent(creditsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public creditsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class producerRowChangeEvent : global::System.EventArgs {
            
            private producerRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public producerRowChangeEvent(producerRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public producerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class presenterRowChangeEvent : global::System.EventArgs {
            
            private presenterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public presenterRowChangeEvent(presenterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public presenterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class guestRowChangeEvent : global::System.EventArgs {
            
            private guestRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public guestRowChangeEvent(guestRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public guestRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class directorRowChangeEvent : global::System.EventArgs {
            
            private directorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public directorRowChangeEvent(directorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public directorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class actorRowChangeEvent : global::System.EventArgs {
            
            private actorRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actorRowChangeEvent(actorRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class categoryRowChangeEvent : global::System.EventArgs {
            
            private categoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public categoryRowChangeEvent(categoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public categoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class countryRowChangeEvent : global::System.EventArgs {
            
            private countryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public countryRowChangeEvent(countryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public countryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591